
    <p><strong>TL;DR</strong></p>

<p>[TOC]</p>

<p><strong>译者注</strong>：很久没有翻译文章了，最近在网络看到这篇介绍网络栈的文章非常详细，正好最近在看这方面的内容，索性翻译过来。因为很多文章比较长，而且很多内容比较专业，翻译过程中难免会有错误，如果读者发现错误，还望不吝指出。文章中 Linux 内核源码摘自哪个版本原文并没有表明，我也没有找到对应的版本，代码的缩进可能会有问题。</p>

<p>原文地址： cubrid.org/blog/understanding-tcp-ip-network-stack，有删减。</p>

<p>没有 TCP/IP 的网络服务是无法想象的，理解数据是怎么在网络中传递的能够让你通过调优、排错来提高网络性能。
这篇文章会介绍 Linux OS 和硬件层的数据流和控制流的网络操作。</p>

<h2 id="一-tcpip-特性">一. TCP/IP 特性</h2>

<p><strong>怎么设计一种网络协议，才能保证数据传输速度很快、能够保证数据的顺序而且没有数据丢失呢？</strong> TCP/IP 的设计目标就是如此，下面这些 TCP/IP 的主要特性是理解网络栈的关键。</p>

<blockquote>
  <p>TCP and IP
技术上说，TCP 和 IP 在不同的网络层，应该分开来表述。方便起见，我们这里把它们作为一个概念。</p>
</blockquote>

<h3 id="1-面向连接">1. 面向连接</h3>

<p>通信双方先建立连接，才能发送数据。TCP 连接是由四元组唯一确定的：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;本地 IP，本地端口，远端 IP，远端端口&gt;
</code></pre></div></div>

<h3 id="2-双向字节流">2. 双向字节流</h3>

<p>使用字节流来进行双向数据传输</p>

<h3 id="3-有序传输">3. 有序传输</h3>

<p>接收方接收到的数据顺序和发送方的发送顺序一致，要做到这点，数据要有顺序的概念，每个数据段用一个 32 位的整数来标志它的顺序。</p>

<h3 id="4-通过确认ack来实现可靠性">4. 通过确认（ACK）来实现可靠性</h3>

<p>如果发送方发送报文之后，没有收到接收方返回的 ACK 确认，发送方会重新发送数据。因此，发送方的 TCP 缓存中保存着接收方还没有确认的数据。</p>

<h3 id="5-流量控制">5. 流量控制</h3>

<p>发送方最多能发送的数据由接收方能接受的数据量决定。接收方会发送它能接收的最大数据量（可用的 buffer 大小，接收窗口大小）给发送方，发送方也只能发送接收方<strong>接收窗口</strong>能够允许的字节大小。</p>

<h3 id="6-拥塞控制">6. 拥塞控制</h3>

<p>拥塞窗口独立于接收窗口，通过限制网络中数据流来阻止网络拥塞。和接收窗口类似，发送方根据一定的算法（比如 TCP Vegas、Westwood、BIC、和 CUBIC）发送接收方拥塞窗口允许的最大数据。和流控不同，拥塞控制只在发送方实现。</p>

<h2 id="二-数据发送流程">二. 数据发送流程</h2>

<p>网络栈有多个层，下图展示了网络不同的层：</p>

<p><img src="http://www.cubrid.org/files/attach/images/1943/944/001/4f230194dd6d52ed4566ef365eb3ff1a.png" alt="" /></p>

<p>这些层大致可以分为三类：</p>

<ol>
  <li>用户域</li>
  <li>内核域</li>
  <li>设备域</li>
</ol>

<p>用户域和内核域的任务是 CPU 执行的，它们两个也和成为主机，用以和设备域进行区别。设备指的是发送和接受报文的网卡（Network Interface Card/NIC）。</p>

<p>我们来看用户域。首先应用构造出需要发送的数据（上图中的 <strong>User Data</strong>部分），然后调用 <code class="highlighter-rouge">write()</code> 系统调用发送数据。假设 socket（图中的 <strong>fd</strong>） 已经创建，当系统调用执行的时候，就进入到内核域。</p>

<p>Linux 和 Unix 这种 POSIX 系列的操作系统暴露文件操作符给应用程序，供它们操作 socket。对于 POSIX 系列操作系统来说，socket 就是一种文件。文件层进行简单的检查，然后通过和文件结构体关联的 socket 结构体调用 socket 对应的函数。</p>

<p>内核 socket 有两个缓存：</p>

<ol>
  <li>用来发送数据的 <strong>socket 发送缓存</strong></li>
  <li>用来接收数据的 <strong>socket 接收缓存</strong></li>
</ol>

<p>当调用 <code class="highlighter-rouge">write</code> 系统调用时，用户域的数据被拷贝到内核内存中，然后添加到 socket 发送缓存的尾部，这是为了按照顺序发送数据。在上图中，浅灰色矩形框代表着 socket 缓存中的数据。接着，TCP 层被调用了。</p>

<p>socket 和 TCB（TCP Control Block） 相关联，TCB 保存着处理 TCP 连接需要的信息，比如连接状态（<strong>LISTEN</strong>、<strong>ESTABLISHED</strong>、<strong>TIME_WAIT</strong>）、接收窗口、拥塞窗口、序列号、重发计时器等。</p>

<p>如果当前的 TCP 状态允许数据传输，就会生成一个新的 TCP segment（或者说报文）。如若因为流控等原因无法进行数据传输，系统调用到此结束，重新回到用户模式（或者说，控制权又重新交给应用）。</p>

<p>如下图所示。TCP 段有两部分：</p>

<ol>
  <li>TCP 头部</li>
  <li>payload</li>
</ol>

<p><img src="http://www.cubrid.org/files/attach/images/1943/944/001/461258caebd0ea3011eaaeeb9cd4a968.png" alt="" /></p>

<p>payload 包括了 socket 发送缓存的数据，payload 的最大值是接收窗口、拥塞窗口和最大段（Maximum Segment Size/MSS） 的三者的最大值。</p>

<p>接着，计算出 TCP checksum。计算 checksum 的时候，会考虑到 IP 地址、segment 长度、和协议号等信息。根据 TCP 状态不同，可以传输的报文从 1 个到多个不等。</p>

<p><strong>NOTE：</strong>事实上，TCP checksum 是网卡计算的，不是内核。但是为了简单起见，我们假定是内核做了这件事。</p>

<p>创建的 TCP 段往下走到 IP 层。IP 层给 TCP 段加上 IP 头部，并执行路由的逻辑。路由是查找下一跳的 IP 地址的过程，目的是更接近目的 IP。</p>

<p>IP 层计算并添加上 checksum 之后，报文被发送到以太网层。以太网层通过 ARP（Address Resolution Protocol） 协议查找下一跳的 MAC 地址，然后把以太网层的头部添加到报文上，这样主机上的报文就是最终的完整状态。</p>

<p>IP 层经过路由，就知道了要传输报文的网络接口（NIC），报文就从这个网口发送到下一跳 IP 所在机器。因此，下一步就是调用网口的驱动。</p>

<p><strong>NOTE：</strong>如果有网络抓包工具（比如 wireshark 或者 tcpdump）在运行，内核会把报文数据拷贝到应用使用的内存区。</p>

<p>网卡驱动根据网卡制造商编写的通信协议向网卡发送传输数据的请求，收到请求之后，网卡（NIC）把数据从主内存拷贝到自己的内存区，然后发送到网络线路上。这个过程中，为了遵循以太网协议，网卡还会为报文添加IFG（Inter-Frame Gap）、preamble、CRC。其中 IFG 和 preamble 是为了区分报文/帧的开始，CRC 是为了保护报文的内容（和 TCP IP 中的 checksum 功能相同）。数据传输的速度决定于以太网的物理速度以及流量控制的现状。</p>

<p>网卡发送数据的时候，会在主机 CPU 产生中断，每个中断都有编号，操作系统根据编号找到对应的驱动处理这个中断。驱动程序会在启动的时候注册它的处理函数到系统，操作系统调用驱动注册的处理函数，然后处理函数把传输的报文返回给操作系统。</p>

<p>至此，我们讨论了应用执行写操作时数据在内核和设备中的发送流程。需要注意的是，即使没有应用层显式的写操作，内核也会调用 TCP 层来发送数据。比如，当收到 ACK 报文，接收窗口扩大，内核会把 socket 发送缓存中的数据组装成 TCP 数据段，发送给接收方。</p>

<h2 id="三-数据接收流程">三. 数据接收流程</h2>

<p>这部分，我们来看看数据的接收流程，数据接收流程是网络栈是怎么处理接收到的数据的。下图主要展示了这个过程：</p>

<p><img src="http://www.cubrid.org/files/attach/images/1943/944/001/5d7322505c1ea20bb741d7b3904ef8f9.png" alt="" /></p>

<p>首先，NIC 把报文拷贝到自己的内存中，检查 CRC 判断报文是否有效。如果有效，则发送到报文到主机的内存缓存区中。这部分内存缓存区是驱动提前申请的，专门用来保存接收到的数据。当缓存被分配的时候，驱动会告诉网卡这块内存的地址和大小。如果网卡接收到某个报文的时候，这部分缓存空间不足了，那么网卡可能直接丢掉报文。</p>

<p>把报文发送到主机的内存后，网卡会向主机发送一个中断。驱动这时候会检查它是否能处理这个报文，如果可以，它会把报文发送给上层的网络协议。往上层发送数据时，报文必须是操作系统能够理解的形式。比如 linux 的 <code class="highlighter-rouge">sk_buff</code>，BSD 系统的 <code class="highlighter-rouge">mbuf</code>，windows 系统的 <code class="highlighter-rouge">NET_BUFFER_LIST</code>，都是操作系统能理解的报文结构体。驱动需要把结构化的报文发送给上层。</p>

<p>以太网层检查报文是否合法，然后把上层协议的类型从报文中抽取出来。以太网层在 <code class="highlighter-rouge">ethertype</code> 字段中保存着上层使用的协议类型。IPv4 协议对应的值是 <code class="highlighter-rouge">0x8000</code>，报文中以太网层的头部会被去掉，剩下的内容发送到上层的 IP 去处理。</p>

<p>IP 层也会检查报文是否合法，不过它检查的是 IP 协议头部的 checksum。根据 IP 协议头部的地址，这一层会判断报文应该交给上层处理，还是执行路由抉择，或者直接发送给其他系统。如果报文应该有当前主机处理，那么上层协议（传输层）类型会从 IP 头部的 <code class="highlighter-rouge">proto</code> 字段读取，比如 TCP 协议对应的值是 6。然后报文的 IP 层头部被去掉，剩下的内容继续发送到上层的 TCP 层处理。</p>

<p>和其他层一样，TCP 层也会先检查报文是否合法，它的判断依据是 TCP checksum。然后它找到和报文关联的 TCB（TCP Control Block），报文是由 <code class="highlighter-rouge">&lt;source IP, source Port, target IP, target Port&gt;</code> 四元组作为连接标识的。系统找到对应的连接就能继续协议层的处理。如果这是收到的新数据，它会把数据拷贝到 socket 接收缓存中。根据 TCP 连接的状态，可能还会发送一个新的 TCP 报文（比如 ACK 报文通知对方报文已经收到）。至此，TCP/IP 报文接收流程就完成了。</p>

<p>socket 接收缓存的大小就是 TCP 接受窗口，在一定条件下，TCP 的吞吐量会随着接收窗口增加而增加。过去接收窗口是应用或者操作系统进行配置的，现在的网络栈能够自动调整接收窗口。</p>

<p>当应用调用 <code class="highlighter-rouge">read</code> 系统调用时，控制权就到了内核，内核会把数据从 socket 缓存拷贝到用户域的内存中，拷贝之后缓存中的数据就被删除。接着 TCP 相关的函数被触发，因为有了新的缓存空间可用，TCP 会增加接收窗口的大小。如果需要，TCP 还会发送一个报文给对方，如果没有数据要发送，系统调用就到此结束。</p>

<h2 id="四-网络栈发展">四. 网络栈发展</h2>

<p>上面只描述了网络栈各层最基本的功能。1990 年代网络栈的功能就已经比上面描述的要多，而最近的网络栈功能更多，复杂度也更高。</p>

<p>最新的网络栈按照功能可以分成下面几类：</p>

<h3 id="报文预处理操作">报文预处理操作</h3>

<p>Netfilter（firewall，NAT）和流量控制允许用户在基本流程中插入控制代码，改变报文的处理逻辑。</p>

<h3 id="协议性能">协议性能</h3>

<p>性能是为了提高 TCP 协议在网络环境中的吞吐量，延迟和稳定性，例子包括各样的拥塞控制算法和 SACK 这样的 TCP 功能。这类的协议改进不会在本文讨论，因为它超出了文章的范围。</p>

<h3 id="报文处理效率">报文处理效率</h3>

<p>报文处理效率是为了提高每秒能处理的报文数量，一般是通过减少 CPU 周期，内存使用，和内存读取时间。减少系统延迟要很多方法，比如并行处理、头部预测、zero-copy、single-copy、checksum offload、TSO、LRO、RSS 等。</p>

<h2 id="五-网络栈流量控制">五. 网络栈流量控制</h2>

<p>现在，让我们详细分析网络栈内部的数据流。网络栈基本工作模式是事件驱动的，也就是说事件发生会触发一系列的处理逻辑，因此不需要额外的线程。下图展示了更精细的数据控制流程：</p>

<p><img src="http://www.cubrid.org/files/attach/images/1943/944/001/bf6bff327d8abd33c8e44258c98ccce6.png" alt="" /></p>

<p>图中 (1) 表示应用程序调用了某个系统调用来执行（或者说使用）TCP，比如调用 <code class="highlighter-rouge">read</code> 或者 <code class="highlighter-rouge">write</code> 系统调用函数。不过，这一步并没有任何报文传输。</p>

<p>（2）和 (1) 类似，只是执行 TCP 逻辑之后，还会把报文发送出去。TCP 会生成一个报文，然后往下一直发送到网卡驱动。报文会先到达队列，然后队列的实现决定什么时候把报文发给网卡驱动。这个过程是 linux 中的 queue discipline（qdisc），linux 流量控制就是控制 qdisc 实现的。默认的 qdisc 算法是先进先出（FIFO），通过使用其他的 qdisc 算法，用户可以实现各种效果，比如人为的报文丢失、报文延迟、传输速率控制等。</p>

<p>流程 (3) 表示 TCP 使用的计时器过期的过程。比如 <strong>TIME_WAIT</strong>计时器过期，TCP 会被调用删除这个连接。</p>

<p>流程（4）和 流程（3）类似，TCP 计时器过期，但是需要重新发送报文。比如，重传计时器过期，没有接收到 ACK 的报文会重新发送。这两个流程展示了计时器软中断的处理过程。</p>

<p>当网卡驱动接收到一个中断，它会释放传输的报文。大多数情况下，驱动的任务到此就结束了。流程（5）是报文在传输队列（transmit queue）集聚，网卡驱动请求一个软中断（softirq），中断处理函数把传输队列中的报文发送到网卡驱动中。</p>

<p>当网卡驱动接受到一个中断，并且收到了一个新的报文，它也会请求一个软中断。这个软中断会处理接收到的报文，调用驱动程序，并把报文传输到上层。在 Linux 系统中，处理接收到报文的过程被称为 New API（NAPI），它和 polling 类似，因为驱动不会直接把报文发送给上层，而是上层直接获取报文。对应的代码成为 NAPI poll 或者简称 poll。</p>

<p>流程（6）展示了 TCP 执行完成的过程，流程（7）是 TCP 流程需要传输额外的报文。（5）、（6）和（7）都是软中断执行的，而软中断之前也处理了网卡中断。</p>

<h2 id="六-怎么处理中断和接收到的报文">六. 怎么处理中断和接收到的报文？</h2>

<p>中断处理的过程很复杂，但是我们需要了解和报文接收有关的性能问题。下图展示了处理中断的过程：</p>

<p><img src="http://www.cubrid.org/files/attach/images/1943/944/001/29b36ba3ab2a478bd683d1ab0be694da.png" alt="" /></p>

<p>假设 CPU 0 在执行应用程序，这时网卡收到一个报文，并为 CPU 0 产生一个中断。CPU 会执行内核中断（irq）处理（<code class="highlighter-rouge">do_IRQ()</code>），它会找到中断号，调用对应的驱动中断处理函数。驱动释放传送的报文，然后调用 <code class="highlighter-rouge">napi_schedule()</code> 函数处理接收的报文。这个函数发起软件中断（softirq）。</p>

<p>驱动中断处理完成结束后，控制权就回到了内核处理函数,内核处理函数执行软件中断的中断处理（<code class="highlighter-rouge">do_softirq()</code>）。</p>

<p>软件处理函数处理接收报文的是 <code class="highlighter-rouge">net_tx_action()</code> 函数。这个函数调用驱动的 <code class="highlighter-rouge">poll()</code> 函数，<code class="highlighter-rouge">poll()</code> 函数继续调用 <code class="highlighter-rouge">netif_receive_skb()</code>函数，然后把接收到的报文逐个发送给上层。软件中断处理结束后，应用就从系统调用之后的地方继续执行。</p>

<p>CPU 收到中断之后，会从头执行到结束，Linux、 BSD 和 Windows 系统的执行流程大致如此。当检查服务器 CPU 使用率时，有时候会看到多个 CPU 中只有一个 CPU 在执行软中断，就是因为这样。为了解决这个问题，提出了很多方案，比如多队列网卡、RSS、和 RPS。</p>

<h2 id="七-数据结构">七. 数据结构</h2>

<p>下面介绍网络栈主要的数据结构。</p>

<h3 id="sk_buff-结构体">sk_buff 结构体</h3>

<p><strong>sk_buff</strong> 或者说 <strong>skb</strong> 代表一个报文，下图就展示了 <strong>sk_buff</strong> 的结构。随着网络功能的增加，这个结构体也会越来越复杂，但是基本的功能却保持不变。</p>

<p><img src="http://www.cubrid.org/files/attach/images/1943/944/001/cfdb2ac9851aa45fdc5dc8fbabf0de37.png" alt="" /></p>

<h4 id="包含报文数据和-metadata">包含报文数据和 metadata</h4>

<p>这个结构体包含了报文数据，或者保存了指向报文数据的指针。上图中，data 指针指向了报文，<code class="highlighter-rouge">frags</code> 指向真正的页。</p>

<p>诸如头部和 payload 长度这些信息保存在 meta data 区域，比如上图中 <code class="highlighter-rouge">mac_header</code>、<code class="highlighter-rouge">network_header</code> 和 <code class="highlighter-rouge">transport_header</code> 分别指向了以太网头部、IP 头部和 TCP 头部，这种方式让 TCP 报文处理更容易。</p>

<h4 id="如何添加和删除头部">如何添加和删除头部</h4>

<p>在网络栈各层向上或者向下移动时，各层会添加或者删除头部。指针是为了操作更有效，比如要删除以太网头部，只需要增加 <code class="highlighter-rouge">head</code> 指针偏移量就行。</p>

<h4 id="如何合并和分解报文">如何合并和分解报文</h4>

<p>链表用来高效地执行添加或者删除报文 payload 的任务，<code class="highlighter-rouge">next</code> 和 <code class="highlighter-rouge">prev</code> 指针就是这个功能。</p>

<h4 id="快速分配和释放">快速分配和释放</h4>

<p>因为每次创建报文都要分配一个结构体，因此这里使用了快速分配。比如，如果数据在 10G 的以太网传输，那么每分钟至少要创建和删除一百万报文。</p>

<h3 id="tcp-control-block">TCP Control Block</h3>

<p>其次，还有一个代表 TCP 连接的结构体，被称为 TCP control block，Linux 中对应的是 <code class="highlighter-rouge">tcp_sock</code>。在下图中，你可以看到 file、socket、和 <code class="highlighter-rouge">tcp_sock</code> 的关系：</p>

<p><img src="http://www.cubrid.org/files/attach/images/1943/944/001/ca2196ad43ec94fdb25bfb486ed64857.png" alt="" /></p>

<p>系统调用发生时，系统会检查应用使用的文件描述符。对于 Unix 系列的操作系统来说，socket、file、和文件系统的设备都被抽象为文件，因此 <code class="highlighter-rouge">file</code> 的结构体中保存的信息最少。对于 socket，有一个额外的 <code class="highlighter-rouge">socket</code> 结构体保存着和这个 socket 有关的信息。<code class="highlighter-rouge">file</code> 有一个指针指向 <code class="highlighter-rouge">socket</code>，而 <code class="highlighter-rouge">socket</code> 又指向 <code class="highlighter-rouge">tcp_sock</code>。<code class="highlighter-rouge">tcp_sock</code> 可以分成 sock、inet_sock 不同的类型来支持出 TCP 之外的各种协议。可以把这理解为多态！</p>

<p>TCP 协议的所有状态信息都保存在 <code class="highlighter-rouge">tcp_sock</code> 中，比如序列号、接受窗口、拥塞控制、和重传计时器都保存在 <code class="highlighter-rouge">tcp_sock</code>。</p>

<p>socket 发送缓存和接收缓存就是 <code class="highlighter-rouge">sk_buff</code> 列表，它们也保存了 <code class="highlighter-rouge">tcp_sock</code> 信息。<code class="highlighter-rouge">dst_entry</code> 和 IP 路由结果是为了避免频繁地进行路由。<code class="highlighter-rouge">dst_entry</code> 允许快速搜索 ARP 结果，也就是目的 MAC 地址。<code class="highlighter-rouge">dst_entry</code> 是路由表的一部分，路由表的结构非常复杂，这篇文章不会讨论。报文传输要使用的网络设备也能通过 <code class="highlighter-rouge">dst_entry</code> 搜索到，网络设备对应的结构体是 <code class="highlighter-rouge">net_device</code>。</p>

<p>因此，通过 <code class="highlighter-rouge">file</code> 结构体和各级指针就能找到处理 TCP 报文需要的结构体（从文件一直到网络驱动），各种结构体的大小之和也就是 TCP 连接要占用的内存大小，这个值在几 KB（当然不包括报文的数据）。对着更多的功能加进来，这个内存使用也会逐渐增加。</p>

<p>最后，我们来看看 TCP 连接查找表（lookup table），这是一个哈希表，用来搜索接收到的报文属于哪个 TCP 连接。哈希值是通过报文的 <code class="highlighter-rouge">&lt;source IP, target IP, source port, target port&gt;</code> 四元组和 Jenkins 哈希算法计算的，据说使用这个算法是为了应对对哈希表的攻击。</p>

<h2 id="八-源码解读发送数据">八. 源码解读：发送数据</h2>

<p>我们通过阅读 Linux 内核源码来看看网络栈具体执行的关键任务，我们将会观察经常用到的两条线路。</p>

<p>首先，第一条是应用程序调用 <code class="highlighter-rouge">write</code> 系统调用发送报文的线路。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SYSCALL_DEFINE3</span><span class="p">(</span><span class="n">write</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="n">__user</span> <span class="o">*</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="p">...)</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">file</span><span class="p">;</span>
    <span class="p">...</span>
    <span class="n">file</span> <span class="o">=</span> <span class="n">fget_light</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">fput_needed</span><span class="p">);</span>
    <span class="p">...</span> 
    <span class="n">ret</span> <span class="o">=</span> <span class="n">filp</span><span class="o">-&gt;</span><span class="n">f_op</span><span class="o">-&gt;</span><span class="n">aio_write</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kiocb</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">iov</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">kiocb</span><span class="p">.</span><span class="n">ki_pos</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">file_operations</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="kt">ssize_t</span> <span class="p">(</span><span class="o">*</span><span class="n">aio_read</span><span class="p">)</span> <span class="p">(</span><span class="k">struct</span> <span class="n">kiocb</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">iovec</span> <span class="o">*</span><span class="p">,</span> <span class="p">...)</span>
    <span class="kt">ssize_t</span> <span class="p">(</span><span class="o">*</span><span class="n">aio_write</span><span class="p">)</span> <span class="p">(</span><span class="k">struct</span> <span class="n">kiocb</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">iovec</span> <span class="o">*</span><span class="p">,</span> <span class="p">...)</span>
    <span class="p">...</span>
<span class="p">};</span>
 
<span class="k">static</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">file_operations</span> <span class="n">socket_file_ops</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="p">.</span><span class="n">aio_read</span> <span class="o">=</span> <span class="n">sock_aio_read</span><span class="p">,</span>
    <span class="p">.</span><span class="n">aio_write</span> <span class="o">=</span> <span class="n">sock_aio_write</span><span class="p">,</span>
    <span class="p">...</span>
<span class="p">};</span>
</code></pre></div></div>

<p>当应用程序调用 <code class="highlighter-rouge">write</code> 系统调用，内核执行 <code class="highlighter-rouge">write()</code> 函数。首先要根据 fd 找到真正的而繁忙操作符，然后调用 <code class="highlighter-rouge">aio_write</code>，这是一个函数指针。在 <code class="highlighter-rouge">file</code> 结构体中，你可以看到 <code class="highlighter-rouge">file_operations</code> 结构体指针，这个结构体被称作函数表，里面包含了 <code class="highlighter-rouge">aio_read</code> 和 <code class="highlighter-rouge">aio_write</code> 等函数指针。socket 真正的函数表是 <code class="highlighter-rouge">socket_file_ops</code>，socket 使用的 <code class="highlighter-rouge">aio_write</code> 函数是 <code class="highlighter-rouge">sock_aio_write</code>。这个函数表的功能类似于 Jave 的 interface，可以方便内核进行代码抽象和重构。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">ssize_t</span> <span class="nf">sock_aio_write</span><span class="p">(</span><span class="k">struct</span> <span class="n">kiocb</span> <span class="o">*</span><span class="n">iocb</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">iovec</span> <span class="o">*</span><span class="n">iov</span><span class="p">,</span> <span class="p">..)</span>
<span class="p">{</span>
    <span class="p">...</span>
    <span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">sock</span> <span class="o">=</span> <span class="n">file</span><span class="o">-&gt;</span><span class="n">private_data</span><span class="p">;</span>
    <span class="p">...</span>
    <span class="k">return</span> <span class="n">sock</span><span class="o">-&gt;</span><span class="n">ops</span><span class="o">-&gt;</span><span class="n">sendmsg</span><span class="p">(</span><span class="n">iocb</span><span class="p">,</span> <span class="n">sock</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="k">struct</span> <span class="n">socket</span> <span class="p">{</span>
    <span class="p">...</span> 
    <span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">file</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">sk</span><span class="p">;</span>
    <span class="k">const</span> <span class="k">struct</span> <span class="n">proto_ops</span> <span class="o">*</span><span class="n">ops</span><span class="p">;</span>
<span class="p">};</span>
 
<span class="k">const</span> <span class="k">struct</span> <span class="n">proto_ops</span> <span class="n">inet_stream_ops</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">family</span> <span class="o">=</span> <span class="n">PF_INET</span><span class="p">,</span>
    <span class="p">...</span>
    <span class="p">.</span><span class="n">connect</span> <span class="o">=</span> <span class="n">inet_stream_connect</span><span class="p">,</span>
    <span class="p">.</span><span class="n">accept</span> <span class="o">=</span> <span class="n">inet_accept</span><span class="p">,</span>
    <span class="p">.</span><span class="n">listen</span> <span class="o">=</span> <span class="n">inet_listen</span><span class="p">,</span> 
    <span class="p">.</span><span class="n">sendmsg</span> <span class="o">=</span> <span class="n">tcp_sendmsg</span><span class="p">,</span>
    <span class="p">.</span><span class="n">recvmsg</span> <span class="o">=</span> <span class="n">inet_recvmsg</span><span class="p">,</span>
    <span class="p">...</span>
<span class="p">};</span>
 
<span class="k">struct</span> <span class="n">proto_ops</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">connect</span><span class="p">)</span> <span class="p">(</span><span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">sock</span><span class="p">,</span> <span class="p">...)</span>
    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">accept</span><span class="p">)</span> <span class="p">(</span><span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">sock</span><span class="p">,</span> <span class="p">...)</span>
    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">listen</span><span class="p">)</span> <span class="p">(</span><span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">sock</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">);</span>
    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">sendmsg</span><span class="p">)</span> <span class="p">(</span><span class="k">struct</span> <span class="n">kiocb</span> <span class="o">*</span><span class="n">iocb</span><span class="p">,</span> <span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">sock</span><span class="p">,</span> <span class="p">...)</span>
    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">recvmsg</span><span class="p">)</span> <span class="p">(</span><span class="k">struct</span> <span class="n">kiocb</span> <span class="o">*</span><span class="n">iocb</span><span class="p">,</span> <span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">sock</span><span class="p">,</span> <span class="p">...)</span>
    <span class="p">...</span>
<span class="p">};</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">sock_aio_write</code> 函数从 <code class="highlighter-rouge">file</code> 结构体中获取 <code class="highlighter-rouge">socket</code> 结构，然后调用 <code class="highlighter-rouge">sendmsg</code>，这也是一个函数指针。<code class="highlighter-rouge">socket</code> 结构体包括了 <code class="highlighter-rouge">proto_ops</code> 的函数表，IPv4 对应的实现是 <code class="highlighter-rouge">inet_stream_ops</code>， 其中 <code class="highlighter-rouge">sendmsg</code> 对应的实现是 <code class="highlighter-rouge">tcp_sendmsg</code>。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">tcp_sendmsg</span><span class="p">(</span><span class="k">struct</span> <span class="n">kiocb</span> <span class="o">*</span><span class="n">iocb</span><span class="p">,</span> <span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">sock</span><span class="p">,</span>
<span class="k">struct</span> <span class="n">msghdr</span> <span class="o">*</span><span class="n">msg</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">sk</span> <span class="o">=</span> <span class="n">sock</span><span class="o">-&gt;</span><span class="n">sk</span><span class="p">;</span>
	<span class="k">struct</span> <span class="n">iovec</span> <span class="o">*</span><span class="n">iov</span><span class="p">;</span>
	<span class="k">struct</span> <span class="n">tcp_sock</span> <span class="o">*</span><span class="n">tp</span> <span class="o">=</span> <span class="n">tcp_sk</span><span class="p">(</span><span class="n">sk</span><span class="p">);</span>
	<span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">;</span>
	<span class="p">...</span>
	
	<span class="n">mss_now</span> <span class="o">=</span> <span class="n">tcp_send_mss</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size_goal</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
	<span class="cm">/* Ok commence sending. */</span>
	<span class="n">iovlen</span> <span class="o">=</span> <span class="n">msg</span><span class="o">-&gt;</span><span class="n">msg_iovlen</span><span class="p">;</span>
	<span class="n">iov</span> <span class="o">=</span> <span class="n">msg</span><span class="o">-&gt;</span><span class="n">msg_iov</span><span class="p">;</span>
	<span class="n">copied</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="p">...</span>

	<span class="k">while</span> <span class="p">(</span><span class="o">--</span><span class="n">iovlen</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	    <span class="kt">int</span> <span class="n">seglen</span> <span class="o">=</span> <span class="n">iov</span><span class="o">-&gt;</span><span class="n">iov_len</span><span class="p">;</span>
	    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">__user</span> <span class="o">*</span><span class="n">from</span> <span class="o">=</span> <span class="n">iov</span><span class="o">-&gt;</span><span class="n">iov_base</span><span class="p">;</span>
	    <span class="n">iov</span><span class="o">++</span><span class="p">;</span>
	    
	    <span class="k">while</span> <span class="p">(</span><span class="n">seglen</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	    	<span class="kt">int</span> <span class="n">copy</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	    	<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">size_goal</span><span class="p">;</span>
	    	<span class="p">...</span>
	    	<span class="n">skb</span> <span class="o">=</span> <span class="n">sk_stream_alloc_skb</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span>
	    	    <span class="n">select_size</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">sg</span><span class="p">),</span>
	    	    <span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_allocation</span><span class="p">);</span>
	    	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skb</span><span class="p">)</span>
	    		<span class="k">goto</span> <span class="n">wait_for_memory</span><span class="p">;</span>
	    	<span class="cm">/*
	    	* Check whether we can use HW checksum.
	    	*/</span>
	    	<span class="k">if</span> <span class="p">(</span><span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_route_caps</span> <span class="o">&amp;</span> <span class="n">NETIF_F_ALL_CSUM</span><span class="p">)</span>
	    		<span class="n">skb</span><span class="o">-&gt;</span><span class="n">ip_summed</span> <span class="o">=</span> <span class="n">CHECKSUM_PARTIAL</span><span class="p">;</span>
	    	<span class="p">...</span>
	    	<span class="n">skb_entail</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
	    	<span class="p">...</span>
	    	
	    	<span class="cm">/* Where to copy to? */</span>
	    	<span class="k">if</span> <span class="p">(</span><span class="n">skb_tailroom</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	    	    <span class="cm">/* We have some space in skb head. Superb! */</span>
	    	    <span class="k">if</span> <span class="p">(</span><span class="n">copy</span> <span class="o">&gt;</span> <span class="n">skb_tailroom</span><span class="p">(</span><span class="n">skb</span><span class="p">))</span>
	    	    	<span class="n">copy</span> <span class="o">=</span> <span class="n">skb_tailroom</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
	    	    <span class="k">if</span> <span class="p">((</span><span class="n">err</span> <span class="o">=</span> <span class="n">skb_add_data</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">copy</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
	    	    	<span class="k">goto</span> <span class="n">do_fault</span><span class="p">;</span>
	    	    <span class="p">...</span>
	    	    <span class="k">if</span> <span class="p">(</span><span class="n">copied</span><span class="p">)</span>
	    	    	<span class="n">tcp_push</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">mss_now</span><span class="p">,</span> <span class="n">tp</span><span class="o">-&gt;</span><span class="n">nonagle</span><span class="p">);</span>
            <span class="p">}</span>
	    	<span class="p">...</span>
        <span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">tcp_sendmsg</code> 首先从 <code class="highlighter-rouge">socket</code> 中获取 <code class="highlighter-rouge">tcp_sock</code>，然后把应用要发送的数据拷贝到 socket 发送缓存。当拷贝数据到 <code class="highlighter-rouge">sk_buff</code> 的时候，每个 <code class="highlighter-rouge">sk_buff</code> 要保存多少数据呢？每个 <code class="highlighter-rouge">sk_buff</code> 只能拷贝并保存 MSS(<code class="highlighter-rouge">tcp_send_mss</code>) 字节的内容。Maximum Segment Size（MSS）表示一个 TCP 报文能包含的最大 payload 大小。使用 TSO 和 GSO 能够让每个 <code class="highlighter-rouge">sk_buff</code> 保存超过 <code class="highlighter-rouge">MSS</code> 的数据。相关的内容不会在这篇文章讨论。</p>

<p><code class="highlighter-rouge">sk_stream_allc_skb</code> 函数创建一个新的 <code class="highlighter-rouge">sk_buff</code>，<code class="highlighter-rouge">skb_entail</code> 把 <code class="highlighter-rouge">sk_buff</code> 加到 <code class="highlighter-rouge">send_socket_buffer</code> 的尾部。<code class="highlighter-rouge">skb_add_data</code> 函数把应用的真正数据拷贝到 <code class="highlighter-rouge">sk_buff</code> 中，拷贝的过程是循环多次这个逻辑（创建一个 <code class="highlighter-rouge">sk_buff</code>，然后把它加入到 socket 发送缓存中）。因此位于 MSS 的数据所在的 <code class="highlighter-rouge">sk_buff</code> 在列表的第二个。最终 <code class="highlighter-rouge">tcp_push</code> 把能发送的数据转换成一个报文，并发送出去。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">tcp_push</span><span class="p">(</span><span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">sk</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mss_now</span><span class="p">,</span> <span class="p">...)</span>
	<span class="p">...</span>
 
<span class="k">static</span> <span class="kt">int</span> <span class="n">tcp_write_xmit</span><span class="p">(</span><span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">sk</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">mss_now</span><span class="p">,</span> <span class="p">...)</span>
<span class="kt">int</span> <span class="n">nonagle</span><span class="p">,</span>
<span class="p">{</span>
	<span class="k">struct</span> <span class="n">tcp_sock</span> <span class="o">*</span><span class="n">tp</span> <span class="o">=</span> <span class="n">tcp_sk</span><span class="p">(</span><span class="n">sk</span><span class="p">);</span>
	<span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">;</span>
	<span class="p">...</span>
	
	<span class="k">while</span> <span class="p">((</span><span class="n">skb</span> <span class="o">=</span> <span class="n">tcp_send_head</span><span class="p">(</span><span class="n">sk</span><span class="p">)))</span> <span class="p">{</span>
		<span class="p">...</span>
		<span class="n">cwnd_quota</span> <span class="o">=</span> <span class="n">tcp_cwnd_test</span><span class="p">(</span><span class="n">tp</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cwnd_quota</span><span class="p">)</span>
			<span class="k">break</span><span class="p">;</span>
	
		<span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">tcp_snd_wnd_test</span><span class="p">(</span><span class="n">tp</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">mss_now</span><span class="p">)))</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="p">...</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">tcp_transmit_skb</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">gfp</span><span class="p">)))</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="cm">/* Advance the send_head. This one is sent out.
		* This call will increment packets_out.
		*/</span>
		<span class="n">tcp_event_new_data_sent</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>只要 TCP 允许，<code class="highlighter-rouge">tcp_push</code> 函数会尽可能把 socket 发送缓存中的 <code class="highlighter-rouge">sk_buff</code> 都发送出去。首先，<code class="highlighter-rouge">tcp_send_head</code> 获取到 socket 缓存中第一个 <code class="highlighter-rouge">sk_buff</code>，然后 <code class="highlighter-rouge">tcp_cwnd_test</code> 和 <code class="highlighter-rouge">tcp_snd_wnd_test</code> 检查用色窗口和接受窗口是否允许报文传输。接着，<code class="highlighter-rouge">tcp_transmit_skb</code> 函数创建一个报文：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int</span> <span class="nf">tcp_transmit_skb</span><span class="p">(</span><span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">sk</span><span class="p">,</span> <span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">,</span>
<span class="kt">int</span> <span class="n">clone_it</span><span class="p">,</span> <span class="n">gfp_t</span> <span class="n">gfp_mask</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">const</span> <span class="k">struct</span> <span class="n">inet_connection_sock</span> <span class="o">*</span><span class="n">icsk</span> <span class="o">=</span> <span class="n">inet_csk</span><span class="p">(</span><span class="n">sk</span><span class="p">);</span>
	<span class="k">struct</span> <span class="n">inet_sock</span> <span class="o">*</span><span class="n">inet</span><span class="p">;</span>
	<span class="k">struct</span> <span class="n">tcp_sock</span> <span class="o">*</span><span class="n">tp</span><span class="p">;</span>
	<span class="p">...</span>
	
	<span class="k">if</span> <span class="p">(</span><span class="n">likely</span><span class="p">(</span><span class="n">clone_it</span><span class="p">))</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">skb_cloned</span><span class="p">(</span><span class="n">skb</span><span class="p">)))</span>
			<span class="n">skb</span> <span class="o">=</span> <span class="n">pskb_copy</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">gfp_mask</span><span class="p">);</span>
		<span class="k">else</span>
			<span class="n">skb</span> <span class="o">=</span> <span class="n">skb_clone</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">gfp_mask</span><span class="p">);</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">skb</span><span class="p">))</span>
			<span class="k">return</span> <span class="o">-</span><span class="n">ENOBUFS</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="p">...</span>
	
	<span class="n">skb_push</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">tcp_header_size</span><span class="p">);</span>
	<span class="n">skb_reset_transport_header</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
	<span class="n">skb_set_owner_w</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">sk</span><span class="p">);</span>

	<span class="cm">/* Build TCP header and checksum it. */</span>
	<span class="n">th</span> <span class="o">=</span> <span class="n">tcp_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
	<span class="n">th</span><span class="o">-&gt;</span><span class="n">source</span> <span class="o">=</span> <span class="n">inet</span><span class="o">-&gt;</span><span class="n">inet_sport</span><span class="p">;</span>
	<span class="n">th</span><span class="o">-&gt;</span><span class="n">dest</span> <span class="o">=</span> <span class="n">inet</span><span class="o">-&gt;</span><span class="n">inet_dport</span><span class="p">;</span>
	<span class="n">th</span><span class="o">-&gt;</span><span class="n">seq</span> <span class="o">=</span> <span class="n">htonl</span><span class="p">(</span><span class="n">tcb</span><span class="o">-&gt;</span><span class="n">seq</span><span class="p">);</span>
	<span class="n">th</span><span class="o">-&gt;</span><span class="n">ack_seq</span> <span class="o">=</span> <span class="n">htonl</span><span class="p">(</span><span class="n">tp</span><span class="o">-&gt;</span><span class="n">rcv_nxt</span><span class="p">);</span>
	<span class="p">...</span>
	<span class="n">icsk</span><span class="o">-&gt;</span><span class="n">icsk_af_ops</span><span class="o">-&gt;</span><span class="n">send_check</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
	<span class="p">...</span>
	<span class="n">err</span> <span class="o">=</span> <span class="n">icsk</span><span class="o">-&gt;</span><span class="n">icsk_af_ops</span><span class="o">-&gt;</span><span class="n">queue_xmit</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">likely</span><span class="p">(</span><span class="n">err</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">))</span>
		<span class="k">return</span> <span class="n">err</span><span class="p">;</span>
	<span class="n">tcp_enter_cwr</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

	<span class="k">return</span> <span class="n">net_xmit_eval</span><span class="p">(</span><span class="n">err</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">tcp_transmit_skb</code> 创建一份 <code class="highlighter-rouge">sk_buff</code> 的拷贝（<code class="highlighter-rouge">pskb_copy</code>），不过它只拷贝了 meta 数据，并不没有拷贝整个应用的数据。接着 <code class="highlighter-rouge">skb_push</code> 对头部做安全配置，并记录头部字段的值。<code class="highlighter-rouge">send_check</code> 计算 TCP 的 checksum，如果使用 checksum offload，那么 checksum 就不用在此计算。最后 <code class="highlighter-rouge">queue_xmit</code> 把报文发送到 IP 层，IPv4 实现的 <code class="highlighter-rouge">queu_xmit</code> 函数是 <code class="highlighter-rouge">ip_queue_xmit</code>：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">ip_queue_xmit</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">){</span>
	<span class="p">...</span>
	
	<span class="n">rt</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">rtable</span> <span class="o">*</span><span class="p">)</span><span class="n">__sk_dst_check</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	
	<span class="p">...</span>
	
	<span class="cm">/* OK, we know where to send it, allocate and build IP header. */</span>
	<span class="n">skb_push</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">iphdr</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">opt</span> <span class="o">?</span> <span class="n">opt</span><span class="o">-&gt;</span><span class="n">optlen</span> <span class="o">:</span> <span class="mi">0</span><span class="p">));</span>
	<span class="n">skb_reset_network_header</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
	<span class="n">iph</span> <span class="o">=</span> <span class="n">ip_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
	<span class="o">*</span><span class="p">((</span><span class="n">__be16</span> <span class="o">*</span><span class="p">)</span><span class="n">iph</span><span class="p">)</span> <span class="o">=</span> <span class="n">htons</span><span class="p">((</span><span class="mi">4</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mi">5</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">inet</span><span class="o">-&gt;</span><span class="n">tos</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">));</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">ip_dont_fragment</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rt</span><span class="o">-&gt;</span><span class="n">dst</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">skb</span><span class="o">-&gt;</span><span class="n">local_df</span><span class="p">)</span>
		<span class="n">iph</span><span class="o">-&gt;</span><span class="n">frag_off</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">IP_DF</span><span class="p">);</span>
	<span class="k">else</span>
		<span class="n">iph</span><span class="o">-&gt;</span><span class="n">frag_off</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	
	<span class="n">iph</span><span class="o">-&gt;</span><span class="n">ttl</span> <span class="o">=</span> <span class="n">ip_select_ttl</span><span class="p">(</span><span class="n">inet</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rt</span><span class="o">-&gt;</span><span class="n">dst</span><span class="p">);</span>
	<span class="n">iph</span><span class="o">-&gt;</span><span class="n">protocol</span> <span class="o">=</span> <span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_protocol</span><span class="p">;</span>
	<span class="n">iph</span><span class="o">-&gt;</span><span class="n">saddr</span> <span class="o">=</span> <span class="n">rt</span><span class="o">-&gt;</span><span class="n">rt_src</span><span class="p">;</span>
	<span class="n">iph</span><span class="o">-&gt;</span><span class="n">daddr</span> <span class="o">=</span> <span class="n">rt</span><span class="o">-&gt;</span><span class="n">rt_dst</span><span class="p">;</span>
	<span class="p">...</span>
	<span class="n">res</span> <span class="o">=</span> <span class="n">ip_local_out</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
	<span class="p">...</span> <span class="o">===&gt;</span>
	<span class="kt">int</span> <span class="n">__ip_local_out</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">)</span>
	<span class="p">...</span>
	<span class="n">ip_send_check</span><span class="p">(</span><span class="n">iph</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">nf_hook</span><span class="p">(</span><span class="n">NFPROTO_IPV4</span><span class="p">,</span> <span class="n">NF_INET_LOCAL_OUT</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>
				   <span class="n">skb_dst</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">dst_output</span><span class="p">);</span>
	
	<span class="p">...</span> <span class="o">===&gt;</span>
 
<span class="p">}</span>

<span class="kt">int</span> <span class="n">ip_output</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span> <span class="o">=</span> <span class="n">skb_dst</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">;</span>
	<span class="p">...</span>
	<span class="n">skb</span><span class="o">-&gt;</span><span class="n">dev</span> <span class="o">=</span> <span class="n">dev</span><span class="p">;</span>
	<span class="n">skb</span><span class="o">-&gt;</span><span class="n">protocol</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">ETH_P_IP</span><span class="p">);</span>
	
	<span class="k">return</span> <span class="n">NF_HOOK_COND</span><span class="p">(</span><span class="n">NFPROTO_IPV4</span><span class="p">,</span> <span class="n">NF_INET_POST_ROUTING</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">dev</span><span class="p">,</span>
	<span class="n">ip_finish_output</span><span class="p">,</span>
	<span class="p">...</span> <span class="o">===&gt;</span>
	<span class="k">static</span> <span class="kt">int</span> <span class="n">ip_finish_output</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">)</span>
	<span class="p">...</span>
	
	<span class="k">if</span> <span class="p">(</span><span class="n">skb</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">&gt;</span> <span class="n">ip_skb_dst_mtu</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">skb_is_gso</span><span class="p">(</span><span class="n">skb</span><span class="p">))</span>
	    <span class="k">return</span> <span class="n">ip_fragment</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">ip_finish_output2</span><span class="p">);</span>
	<span class="k">else</span>
	    <span class="k">return</span> <span class="n">ip_finish_output2</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">ip_queue_xmit</code> 执行 IP 层需要的逻辑，<code class="highlighter-rouge">__sk_dst_check</code> 检查缓存的路由是否有效。如果没有缓存的路由，或者缓存的路由已经失效，就要执行 IP 路由逻辑。接着 <code class="highlighter-rouge">skb_push</code> 用来对 IP 头部进行安全设置，并记录 IP 头部字段值。接着，<code class="highlighter-rouge">ip_send_check</code> 计算 IP 头部的 checksum，并调用 <code class="highlighter-rouge">netfilter</code> 函数。如果需要 IP 分片，<code class="highlighter-rouge">ip_finish_ouput</code> 也会对 IP 进行分片，如果上层是 TCP 的话，就不需要进行分片。因此 <code class="highlighter-rouge">ip_finish_output2</code> 就被调用添加以太网头部。最后，一个完整的报文就产生了。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">dev_queue_xmit</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">)</span>
	<span class="p">...</span> <span class="o">===&gt;</span>
	<span class="k">static</span> <span class="kr">inline</span> <span class="kt">int</span> <span class="n">__dev_xmit_skb</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">,</span> <span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">q</span><span class="p">,</span> <span class="p">...)</span>
	<span class="p">...</span>
	<span class="k">if</span> <span class="p">(...)</span> <span class="p">{</span>
		<span class="p">....</span>
	
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">((</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">TCQ_F_CAN_BYPASS</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">qdisc_qlen</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
	<span class="n">qdisc_run_begin</span><span class="p">(</span><span class="n">q</span><span class="p">))</span> <span class="p">{</span>
		<span class="p">...</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">sch_direct_xmit</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">dev</span><span class="p">,</span> <span class="n">txq</span><span class="p">,</span> <span class="n">root_lock</span><span class="p">))</span> <span class="p">{</span>
			<span class="p">...</span> <span class="o">===&gt;</span>
			<span class="kt">int</span> <span class="n">sch_direct_xmit</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">,</span> <span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">q</span><span class="p">,</span> <span class="p">...)</span>
	
			<span class="p">...</span>
	
			<span class="n">HARD_TX_LOCK</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">txq</span><span class="p">,</span> <span class="n">smp_processor_id</span><span class="p">());</span>
	
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">netif_tx_queue_frozen_or_stopped</span><span class="p">(</span><span class="n">txq</span><span class="p">))</span>
	
		<span class="n">ret</span> <span class="o">=</span> <span class="n">dev_hard_start_xmit</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">dev</span><span class="p">,</span> <span class="n">txq</span><span class="p">);</span>
	
	
	
	<span class="n">HARD_TX_UNLOCK</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">txq</span><span class="p">);</span>
	
	<span class="p">...</span>
	
<span class="p">}</span>
 
<span class="kt">int</span> <span class="n">dev_hard_start_xmit</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">,</span> <span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">,</span> <span class="p">...)</span>
	<span class="p">...</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">list_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ptype_all</span><span class="p">))</span>
		<span class="n">dev_queue_xmit_nit</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">dev</span><span class="p">);</span>
	<span class="p">...</span>
	<span class="n">rc</span> <span class="o">=</span> <span class="n">ops</span><span class="o">-&gt;</span><span class="n">ndo_start_xmit</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">dev</span><span class="p">);</span>
	<span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>最终完整的报文通过 <code class="highlighter-rouge">dev_queue_xmit</code> 传输。首先，报文通过 <code class="highlighter-rouge">qdisc</code>，如果使用的是默认 <code class="highlighter-rouge">qdisc</code> 而且队列是空的，<code class="highlighter-rouge">sch_direct_xmit</code> 函数会跳过队列过程，直接把报文发送给驱动。<code class="highlighter-rouge">dev_hard_start_xmit</code> 函数调用真正的驱动，在调用驱动之前，会先锁上设备的 <code class="highlighter-rouge">TX</code>，这是为了防止多个线程同时操作驱动。内核锁住设备 <code class="highlighter-rouge">TX</code>，内核的传输代码就不需要再次加锁了。</p>

<p><code class="highlighter-rouge">ndo_start_xmit</code> 函数调用驱动代码，在此之前还有 <code class="highlighter-rouge">ptype_all</code> 和 <code class="highlighter-rouge">dev_queue_xmit_nit</code>。<code class="highlighter-rouge">ptype_all</code> 是一个包含了诸如 packet capture 模块的列表，如果有 capture 应用在运行，那么 <code class="highlighter-rouge">ptype_all</code> 会把报文拷贝到应用程序使用的地方，所以 tcpdump 一类的工具看到的报文都是要发送给驱动的。如果使用了 checksum offload 或者 TSO，网卡会对报文进行操作，这将导致最终发到网络上的报文和 tcpdump 捕获的不同。报文传输完成之后，驱动中断处理函数返回 <code class="highlighter-rouge">sk_buff</code>。</p>

<h2 id="九-源码解读接收数据">九. 源码解读：接收数据</h2>

<p>接收数据的流程大致就是从网络上接收到报文，然后一路网上送到 socket 接收缓存中。在执行完驱动中断程序，我们先来看看 <code class="highlighter-rouge">napi</code> poll handler：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">void</span> <span class="nf">net_rx_action</span><span class="p">(</span><span class="k">struct</span> <span class="n">softirq_action</span> <span class="o">*</span><span class="n">h</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">struct</span> <span class="n">softnet_data</span> <span class="o">*</span><span class="n">sd</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">__get_cpu_var</span><span class="p">(</span><span class="n">softnet_data</span><span class="p">);</span>
	<span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">time_limit</span> <span class="o">=</span> <span class="n">jiffies</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">budget</span> <span class="o">=</span> <span class="n">netdev_budget</span><span class="p">;</span>
	<span class="kt">void</span> <span class="o">*</span><span class="n">have</span><span class="p">;</span>
	<span class="n">local_irq_disable</span><span class="p">();</span>
	
	<span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">list_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sd</span><span class="o">-&gt;</span><span class="n">poll_list</span><span class="p">))</span> <span class="p">{</span>
		<span class="k">struct</span> <span class="n">napi_struct</span> <span class="o">*</span><span class="n">n</span><span class="p">;</span>
		<span class="p">...</span>
	
		<span class="n">n</span> <span class="o">=</span> <span class="n">list_first_entry</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sd</span><span class="o">-&gt;</span><span class="n">poll_list</span><span class="p">,</span> <span class="k">struct</span> <span class="n">napi_struct</span><span class="p">,</span> <span class="n">poll_list</span><span class="p">);</span>
	
		<span class="k">if</span> <span class="p">(</span><span class="n">test_bit</span><span class="p">(</span><span class="n">NAPI_STATE_SCHED</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="o">-&gt;</span><span class="n">state</span><span class="p">))</span> <span class="p">{</span>
			<span class="n">work</span> <span class="o">=</span> <span class="n">n</span><span class="o">-&gt;</span><span class="n">poll</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">weight</span><span class="p">);</span>
			<span class="n">trace_napi_poll</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="p">...</span>
<span class="p">}</span>
 
 
<span class="kt">int</span> <span class="nf">netif_receive_skb</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">)</span>
 
<span class="p">...</span> <span class="o">===&gt;</span>
 
<span class="k">static</span> <span class="kt">int</span> <span class="n">__netif_receive_skb</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">struct</span> <span class="n">packet_type</span> <span class="o">*</span><span class="n">ptype</span><span class="p">,</span> <span class="o">*</span><span class="n">pt_prev</span><span class="p">;</span>
	<span class="p">...</span>
	<span class="n">__be16</span> <span class="n">type</span><span class="p">;</span>
	<span class="p">...</span>
	<span class="n">list_for_each_entry_rcu</span><span class="p">(</span><span class="n">ptype</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ptype_all</span><span class="p">,</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ptype</span><span class="o">-&gt;</span><span class="n">dev</span> <span class="o">||</span> <span class="n">ptype</span><span class="o">-&gt;</span><span class="n">dev</span> <span class="o">==</span> <span class="n">skb</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">pt_prev</span><span class="p">)</span>
				<span class="n">ret</span> <span class="o">=</span> <span class="n">deliver_skb</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">pt_prev</span><span class="p">,</span> <span class="n">orig_dev</span><span class="p">);</span>
		<span class="n">pt_prev</span> <span class="o">=</span> <span class="n">ptype</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="p">...</span>
	<span class="n">type</span> <span class="o">=</span> <span class="n">skb</span><span class="o">-&gt;</span><span class="n">protocol</span><span class="p">;</span>
	<span class="n">list_for_each_entry_rcu</span><span class="p">(</span><span class="n">ptype</span><span class="p">,</span>
	<span class="o">&amp;</span><span class="n">ptype_base</span><span class="p">[</span><span class="n">ntohs</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">PTYPE_HASH_MASK</span><span class="p">],</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">ptype</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">type</span> <span class="o">&amp;&amp;</span>
		<span class="p">(</span><span class="n">ptype</span><span class="o">-&gt;</span><span class="n">dev</span> <span class="o">==</span> <span class="n">null_or_dev</span> <span class="o">||</span> <span class="n">ptype</span><span class="o">-&gt;</span><span class="n">dev</span> <span class="o">==</span> <span class="n">skb</span><span class="o">-&gt;</span><span class="n">dev</span> <span class="o">||</span>
		<span class="n">ptype</span><span class="o">-&gt;</span><span class="n">dev</span> <span class="o">==</span> <span class="n">orig_dev</span><span class="p">))</span> <span class="p">{</span>
	
		<span class="k">if</span> <span class="p">(</span><span class="n">pt_prev</span><span class="p">)</span>
			<span class="n">ret</span> <span class="o">=</span> <span class="n">deliver_skb</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">pt_prev</span><span class="p">,</span> <span class="n">orig_dev</span><span class="p">);</span>
		<span class="n">pt_prev</span> <span class="o">=</span> <span class="n">ptype</span><span class="p">;</span>
	<span class="p">}</span>
	
	<span class="k">if</span> <span class="p">(</span><span class="n">pt_prev</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">ret</span> <span class="o">=</span> <span class="n">pt_prev</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">skb</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">pt_prev</span><span class="p">,</span> <span class="n">orig_dev</span><span class="p">);</span>
		<span class="k">static</span> <span class="k">struct</span> <span class="n">packet_type</span> <span class="n">ip_packet_type</span> <span class="n">__read_mostly</span> <span class="o">=</span> <span class="p">{</span>
			<span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">cpu_to_be16</span><span class="p">(</span><span class="n">ETH_P_IP</span><span class="p">),</span>
			<span class="p">.</span><span class="n">func</span> <span class="o">=</span> <span class="n">ip_rcv</span><span class="p">,</span>
			<span class="p">...</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">net_rx_action</code> 是收到报文的软件中断处理函数，首先，请求 <code class="highlighter-rouge">napi</code> poll 的驱动被从 <code class="highlighter-rouge">poll_list</code> 中拿出来，然后调用驱动的 <code class="highlighter-rouge">poll</code> handler。驱动把收到的报文转换成 <code class="highlighter-rouge">sk_buff</code>，然后调用 <code class="highlighter-rouge">netif_receive_skb</code>.</p>

<p>如果有模块在请求所有的报文，那么 <code class="highlighter-rouge">netif_receive_skb</code> 就把报文发送给这个模块。和报文传输一样，这些报文也要发送到 <code class="highlighter-rouge">ptype_all</code> 中注册的所有模块，以便可以被捕获程序读取。</p>

<p>接着，报文根据类型被传输到上层，类型保存在以太网帧头部的 2 比特 <code class="highlighter-rouge">ethertype</code> 字段中，里面的值就代表着报文的类型，驱动会把对应的值保存到 <code class="highlighter-rouge">sk_buff</code> 结构体中（<code class="highlighter-rouge">skb-&gt;protocol</code>）。每个报文都有自己的 <code class="highlighter-rouge">packet_type</code> 结构体，并且会把该结构体的指针注册到 <code class="highlighter-rouge">ptype_base</code> 的哈希表中。IPv4 使用 <code class="highlighter-rouge">ip_packet_type</code>，对应的 <code class="highlighter-rouge">Type</code> 字段的值是 IPv4 的 <code class="highlighter-rouge">ethertype</code>(<code class="highlighter-rouge">ETH_P_IP</code>)。因此，IPv4 报文会调用 <code class="highlighter-rouge">ip_rcv</code> 函数：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">ip_rcv</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">,</span> <span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">,</span> <span class="p">...)</span>
<span class="p">{</span>
	<span class="k">struct</span> <span class="n">iphdr</span> <span class="o">*</span><span class="n">iph</span><span class="p">;</span>
	<span class="n">u32</span> <span class="n">len</span><span class="p">;</span>
	<span class="p">...</span>
	<span class="n">iph</span> <span class="o">=</span> <span class="n">ip_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
	<span class="p">...</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">iph</span><span class="o">-&gt;</span><span class="n">ihl</span> <span class="o">&lt;</span> <span class="mi">5</span> <span class="o">||</span> <span class="n">iph</span><span class="o">-&gt;</span><span class="n">version</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">)</span>
		<span class="k">goto</span> <span class="n">inhdr_error</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pskb_may_pull</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">iph</span><span class="o">-&gt;</span><span class="n">ihl</span><span class="o">*</span><span class="mi">4</span><span class="p">))</span>
		<span class="k">goto</span> <span class="n">inhdr_error</span><span class="p">;</span>

	<span class="n">iph</span> <span class="o">=</span> <span class="n">ip_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">ip_fast_csum</span><span class="p">((</span><span class="n">u8</span> <span class="o">*</span><span class="p">)</span><span class="n">iph</span><span class="p">,</span> <span class="n">iph</span><span class="o">-&gt;</span><span class="n">ihl</span><span class="p">)))</span>
		<span class="k">goto</span> <span class="n">inhdr_error</span><span class="p">;</span>
	
	<span class="n">len</span> <span class="o">=</span> <span class="n">ntohs</span><span class="p">(</span><span class="n">iph</span><span class="o">-&gt;</span><span class="n">tot_len</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">skb</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">IP_INC_STATS_BH</span><span class="p">(</span><span class="n">dev_net</span><span class="p">(</span><span class="n">dev</span><span class="p">),</span> <span class="n">IPSTATS_MIB_INTRUNCATEDPKTS</span><span class="p">);</span>
		<span class="k">goto</span> <span class="n">drop</span><span class="p">;</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">iph</span><span class="o">-&gt;</span><span class="n">ihl</span><span class="o">*</span><span class="mi">4</span><span class="p">))</span>
		<span class="k">goto</span> <span class="n">inhdr_error</span><span class="p">;</span>
	
	<span class="p">...</span>
	<span class="k">return</span> <span class="n">NF_HOOK</span><span class="p">(</span><span class="n">NFPROTO_IPV4</span><span class="p">,</span> <span class="n">NF_INET_PRE_ROUTING</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">dev</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>
	<span class="n">ip_rcv_finish</span><span class="p">);</span>
	<span class="p">...</span> <span class="o">===&gt;</span>
	<span class="kt">int</span> <span class="n">ip_local_deliver</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">)</span>
	<span class="p">...</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">ip_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">frag_off</span> <span class="o">&amp;</span> <span class="n">htons</span><span class="p">(</span><span class="n">IP_MF</span> <span class="o">|</span> <span class="n">IP_OFFSET</span><span class="p">))</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">ip_defrag</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">IP_DEFRAG_LOCAL_DELIVER</span><span class="p">))</span>
			<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
	
	<span class="p">}</span>
 
 
<span class="k">return</span> <span class="n">NF_HOOK</span><span class="p">(</span><span class="n">NFPROTO_IPV4</span><span class="p">,</span> <span class="n">NF_INET_LOCAL_IN</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">skb</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>
<span class="n">ip_local_deliver_finish</span><span class="p">);</span>
<span class="p">...</span> <span class="o">===&gt;</span>
 
<span class="k">static</span> <span class="kt">int</span> <span class="n">ip_local_deliver_finish</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">)</span>
<span class="p">...</span>
<span class="n">__skb_pull</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">ip_hdrlen</span><span class="p">(</span><span class="n">skb</span><span class="p">));</span>
<span class="p">...</span>
<span class="kt">int</span> <span class="n">protocol</span> <span class="o">=</span> <span class="n">ip_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">protocol</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">hash</span><span class="p">,</span> <span class="n">raw</span><span class="p">;</span>
<span class="k">const</span> <span class="k">struct</span> <span class="n">net_protocol</span> <span class="o">*</span><span class="n">ipprot</span><span class="p">;</span>

<span class="p">...</span>
<span class="n">hash</span> <span class="o">=</span> <span class="n">protocol</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">MAX_INET_PROTOS</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
<span class="n">ipprot</span> <span class="o">=</span> <span class="n">rcu_dereference</span><span class="p">(</span><span class="n">inet_protos</span><span class="p">[</span><span class="n">hash</span><span class="p">]);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">ipprot</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
	<span class="p">...</span>
	<span class="n">ret</span> <span class="o">=</span> <span class="n">ipprot</span><span class="o">-&gt;</span><span class="n">handler</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
	<span class="p">...</span> <span class="o">===&gt;</span>
 
<span class="k">static</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">net_protocol</span> <span class="n">tcp_protocol</span> <span class="o">=</span> <span class="p">{</span>
	<span class="p">.</span><span class="n">handler</span> <span class="o">=</span> <span class="n">tcp_v4_rcv</span><span class="p">,</span>
	<span class="p">...</span>
<span class="p">};</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">ip_rcv</code> 函数执行 IP 层的任务，它会先检查报文的长度和头部的 checksum。在通过 netfilter 代码之后，它还会执行 <code class="highlighter-rouge">ip_local_deliver</code>，如果需要还会把 IP 报文进行组装，最后调用 <code class="highlighter-rouge">ip_local_deliver_finish</code>。</p>

<p><code class="highlighter-rouge">ip_local_deliver_finish</code> 使用 <code class="highlighter-rouge">__skb_pull</code> 移除 IP 头部，然后搜索报文中的上层协议，和 <code class="highlighter-rouge">ptype_base</code> 类似，每个传输层都会住在 <code class="highlighter-rouge">net_protocol</code> 结构体到  <code class="highlighter-rouge">inet_protos</code>。IPv4 TCP 使用的是 <code class="highlighter-rouge">tcp_protocol</code>，因此会调用注册的 <code class="highlighter-rouge">tcp_v4_rcv</code> 处理函数。</p>

<p>当报文来到 TCP 层，根据 TCP 的状态和报文类型其处理逻辑也不同。这里，我们假定当前 TCP 是 <code class="highlighter-rouge">ESTABLISHED</code> 状态，然后收到了期望的数据报文。当没有报文丢失和乱序时，下面的流程会被频繁执行：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">tcp_v4_rcv</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">const</span> <span class="k">struct</span> <span class="n">iphdr</span> <span class="o">*</span><span class="n">iph</span><span class="p">;</span>
	<span class="k">struct</span> <span class="n">tcphdr</span> <span class="o">*</span><span class="n">th</span><span class="p">;</span>
	<span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">sk</span><span class="p">;</span>
	<span class="p">...</span>
	<span class="n">th</span> <span class="o">=</span> <span class="n">tcp_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">th</span><span class="o">-&gt;</span><span class="n">doff</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">tcphdr</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4</span><span class="p">)</span>
		<span class="k">goto</span> <span class="n">bad_packet</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pskb_may_pull</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">doff</span> <span class="o">*</span> <span class="mi">4</span><span class="p">))</span>
		<span class="k">goto</span> <span class="n">discard_it</span><span class="p">;</span>
	<span class="p">...</span>
	<span class="n">th</span> <span class="o">=</span> <span class="n">tcp_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
	<span class="n">iph</span> <span class="o">=</span> <span class="n">ip_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
	<span class="n">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">seq</span> <span class="o">=</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">th</span><span class="o">-&gt;</span><span class="n">seq</span><span class="p">);</span>
	<span class="n">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">end_seq</span> <span class="o">=</span> <span class="p">(</span><span class="n">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">seq</span> <span class="o">+</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">syn</span> <span class="o">+</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">fin</span> <span class="o">+</span>
	<span class="n">skb</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">-</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">doff</span> <span class="o">*</span> <span class="mi">4</span><span class="p">);</span>
	<span class="n">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ack_seq</span> <span class="o">=</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">th</span><span class="o">-&gt;</span><span class="n">ack_seq</span><span class="p">);</span>
	<span class="n">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">when</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="n">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">=</span> <span class="n">iph</span><span class="o">-&gt;</span><span class="n">tos</span><span class="p">;</span>
	<span class="n">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">sacked</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	
	<span class="n">sk</span> <span class="o">=</span> <span class="n">__inet_lookup_skb</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tcp_hashinfo</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">source</span><span class="p">,</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">dest</span><span class="p">);</span>
	<span class="p">...</span>
	<span class="n">ret</span> <span class="o">=</span> <span class="n">tcp_v4_do_rcv</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>首先， <code class="highlighter-rouge">tcp_v4_rcv</code> 函数检查接收到的报文，如果报文头部大于数据偏移量( <code class="highlighter-rouge">th-&gt;doff &lt; sizeof(struct tcphdr ) /4</code> )，说明头部错误。然后 <code class="highlighter-rouge">__inet_lookup_skb</code> 在 TCP 连接哈希表中查找当前报文所属的连接。从找到的 <code class="highlighter-rouge">sock</code> 结构体中，就能找到所有其他相关的结构体，比如 <code class="highlighter-rouge">tcp_sock</code> 和 <code class="highlighter-rouge">socket</code>。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">tcp_v4_do_rcv</span><span class="p">(</span><span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">sk</span><span class="p">,</span> <span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">){</span>
	<span class="p">...</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_state</span> <span class="o">==</span> <span class="n">TCP_ESTABLISHED</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* Fast path */</span>
		<span class="n">sock_rps_save_rxhash</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="o">-&gt;</span><span class="n">rxhash</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">tcp_rcv_established</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">tcp_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">),</span> <span class="n">skb</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">))</span> <span class="p">{</span>
		<span class="p">...</span> <span class="o">===&gt;</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">tcp_rcv_established</span><span class="p">(</span><span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">sk</span><span class="p">,</span> <span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">,</span>
<span class="p">...</span>
<span class="cm">/*
* Header prediction.
*/</span>
 
<span class="k">if</span> <span class="p">((</span><span class="n">tcp_flag_word</span><span class="p">(</span><span class="n">th</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">TCP_HP_BITS</span><span class="p">)</span> <span class="o">==</span> <span class="n">tp</span><span class="o">-&gt;</span><span class="n">pred_flags</span> <span class="o">&amp;&amp;</span>
<span class="n">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">seq</span> <span class="o">==</span> <span class="n">tp</span><span class="o">-&gt;</span><span class="n">rcv_nxt</span> <span class="o">&amp;&amp;</span>
<span class="o">!</span><span class="n">after</span><span class="p">(</span><span class="n">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ack_seq</span><span class="p">,</span> <span class="n">tp</span><span class="o">-&gt;</span><span class="n">snd_nxt</span><span class="p">)))</span> <span class="p">{</span>
<span class="p">...</span>
<span class="k">if</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">skb</span><span class="o">-&gt;</span><span class="n">truesize</span> <span class="o">&gt;</span> <span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_forward_alloc</span><span class="p">)</span>
	<span class="k">goto</span> <span class="n">step5</span><span class="p">;</span>

<span class="n">NET_INC_STATS_BH</span><span class="p">(</span><span class="n">sock_net</span><span class="p">(</span><span class="n">sk</span><span class="p">),</span> <span class="n">LINUX_MIB_TCPHPHITS</span><span class="p">);</span>
 
<span class="cm">/* Bulk data transfer: receiver */</span>
<span class="n">__skb_pull</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">tcp_header_len</span><span class="p">);</span>
<span class="n">__skb_queue_tail</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_receive_queue</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
<span class="n">skb_set_owner_r</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">sk</span><span class="p">);</span>
<span class="n">tp</span><span class="o">-&gt;</span><span class="n">rcv_nxt</span> <span class="o">=</span> <span class="n">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">end_seq</span><span class="p">;</span>

<span class="p">...</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">copied_early</span> <span class="o">||</span> <span class="n">tp</span><span class="o">-&gt;</span><span class="n">rcv_nxt</span> <span class="o">!=</span> <span class="n">tp</span><span class="o">-&gt;</span><span class="n">rcv_wup</span><span class="p">)</span>
	<span class="n">__tcp_ack_snd_check</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">...</span>

<span class="n">step5</span><span class="o">:</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">th</span><span class="o">-&gt;</span><span class="n">ack</span> <span class="o">&amp;&amp;</span> <span class="n">tcp_ack</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">FLAG_SLOWPATH</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
	<span class="k">goto</span> <span class="n">discard</span><span class="p">;</span>
	<span class="n">tcp_rcv_rtt_measure_ts</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
	<span class="cm">/* Process urgent data. */</span>
	<span class="n">tcp_urg</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">th</span><span class="p">);</span>
	
	<span class="cm">/* step 7: process the segment text */</span>
	<span class="n">tcp_data_queue</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
	<span class="n">tcp_data_snd_check</span><span class="p">(</span><span class="n">sk</span><span class="p">);</span>
	<span class="n">tcp_ack_snd_check</span><span class="p">(</span><span class="n">sk</span><span class="p">);</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
	<span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">tcp_v4_do_rcv</code> 执行和协议相关的内容。如果 TCP 处于 <code class="highlighter-rouge">ESTABLISHED</code> 状态，就会调用 <code class="highlighter-rouge">tcp_rcv_established</code>，<code class="highlighter-rouge">ESTABLISHED</code> 状态的处理逻辑是独立的并且是单独进行优化的，因为它是最常用的状态。<code class="highlighter-rouge">tcp_rcv_established</code> 首先执行头部预测代码，常见的状态是接收到的报文是期望收到的，并且没有要发送的数据了，比如序列号就是接收 TCP 期望的。这种情况下，只要把数据放到 socket 缓存，然后发送一个 ACK 报文就行。</p>

<p>接下来，你会看到比较 <code class="highlighter-rouge">truesize</code> 和 <code class="highlighter-rouge">sk_forward_alloc</code> 的代码，这是为了检查 socket 接收缓存中是否有足够的空闲空间能添加新的报文数据。如果有，那么头部预测就是 <code class="highlighter-rouge">hit</code>（测试成功），那么 <code class="highlighter-rouge">__skb_pull</code> 会删除 TCP 头部，然后 <code class="highlighter-rouge">__skb_queue_tail</code> 会把报文加到 socket 接收缓存中。最后 <code class="highlighter-rouge">__tcp_ack_snd_check</code> 用来发送 ACK。到此，报文处理过程就结束了。</p>

<p>如果 sockt 接收缓存中没有足够的空间，那么接下来的执行逻辑会话费比较长的事件。<code class="highlighter-rouge">tcp_data_queue</code> 函数先分配额一个新的缓存空间，把报文数据加到 socket 缓存中，同时，socket 缓存大小也要自动进行增加。和前面的执行逻辑不同，<code class="highlighter-rouge">tcp_data_snd_check</code> 会执行，如果有可以发送的报文，就先发送。然后从调用 <code class="highlighter-rouge">tcp_ack_snd_check</code> 创建和发送 ACK 报文。</p>

<p>这两种情况执行的代码并不多，这是常用 case 优化的结果。换句话说，不常用的 case 处理会更慢，比如报文乱序就属于不常用的 case。</p>

<h2 id="十-驱动和网卡之间怎么通信">十. 驱动和网卡之间怎么通信</h2>

<p>驱动和网卡之间的通信过程位于网络栈的底层，大多数人对此并不怎么关系。但是，网卡在执行越来越多的任务以解决性能问题。理解两者通信的基础知识能让你理解这些技术。</p>

<p>驱动和网卡之间的通信是异步的。首先，驱动请求报文传输，CPU 不会等待结果就能执行其他任务。网卡把报文发送出去，然后通知 CPU，驱动把接收到的报文返回。</p>

<p>和报文传输类似，报文接收也是异步的。首先，驱动请求报文接收，CPU 也在执行其他任务。然后网卡接收到报文，并通过 CPU，驱动处理接收到的报文，并返回结果。</p>

<p>因为是异步的，所以需要一块空间来存放请求和应答的结果。多数情况下，网卡使用 <code class="highlighter-rouge">ring</code> 结构体，<code class="highlighter-rouge">ring</code> 类似于常见的 <code class="highlighter-rouge">queue</code> 数据结构，它有固定的大小。每个元素保存一个请求或者应答数据。元素是按顺序轮流使用的，这也是名字 <code class="highlighter-rouge">ring</code> 的来源。</p>

<p>下图报文发送流程，你可以看到 <code class="highlighter-rouge">ring</code> 的用处：</p>

<p><img src="http://www.cubrid.org/files/attach/images/1943/944/001/95f3d5135499686bca8ca30f502e5201.png" alt="" /></p>

<p>驱动从上层接收到数据，然后创建一个网卡能够理解的发送描述符（send descriptor），描述符中保存了报文的大小和内存的地址。因为网卡需要内存的物理地址，因此驱动还要把虚拟地址转换为物理地址。然后，驱动把描述符加入到 <code class="highlighter-rouge">TX ring</code>（1）（发送描述符的 <code class="highlighter-rouge">ring</code>）。</p>

<p>然后，驱动通知网卡有新的请求（2）。驱动会直接把数据写到网卡的内存地址，CPU 会直接通过 PIO（Programmed I/O） 把数据发送给设备。</p>

<p>网卡收到请求之后从主机内存中获取描述符（3），因为网卡设备没有经过 CPU 而是直接访问内存，所以这个过程被成为 DMA（Direct Memory Access）。</p>

<p>拿到发送描述符之后，网卡确定报文的地址和大小，然后从主机内存中拿到真正的报文数据（4）。如果使用 checksum offload，当网卡从内存中获取报文数据的时候就会计算 checksum，因此不会产生额外的开销。</p>

<p>网卡把报文发送出去（5），然后把发送的报文数写到主机内从中（6）。接着，网卡发起一个中断（7），驱动读取发送的报文数，并返回已经发送的报文。</p>

<p>在下面的图片中，我们看到接收报文的流程：</p>

<p><img src="http://www.cubrid.org/files/attach/images/1943/944/001/503efceb4e2486358f390a60252271f5.png" alt="" /></p>

<p>首先，驱动为接收到的报文分配主机内存，并创建接收描述符。接收描述符默认包含了缓存大小和内存地址，和发送描述符一样，接收描述符也保存了 DMA 使用的物理内存地址。然后，把发送描述符加到 RX ring（1）。这是接收请求，而 RX ring 代表这接受请求的 ring。</p>

<p>通过 PIO，驱动通知网卡有新的描述符（2），网卡从 RX ring 中拿到新的描述符。然后它把描述符中的大小和缓存地址保存在网卡内存中（3）。</p>

<p>报文接收之后（4），网卡把报文发送到主机内存的缓存中。如果 checksum offload 函数存在，那么网卡也会在此时计算 checksum。接收报文的真正大小、checksum 值、以及其他信息都保存在一个单独的 ring（接收返回 ring）（6）。receive return ring 保存了接收请求处理的结果。接着，让卡发送中断（7），驱动从接收返回 ring 中获取报文信息，对接收到的报文进行处理。如果需要，还会分配新的内存缓存空间重复（1）和 （2）步骤。</p>

<p>要优化网络栈，很多人觉得 ring 和中断的配置需要调整。如果 TX ring 很大，那么一次可以进行多次发送请求，也可以一次接收到多个报文。比较大的 ring 对大量接收和发送的情况有好处，但是大多数情况下，网卡使用计时器来减少中断的次数，因为 CPU 处理中断开销很大。为了防止产生大多的中断，对主机造成泛洪，接收和发送报文的中断会定期收集和发送。</p>

<h2 id="十一-缓存和流量控制">十一. 缓存和流量控制</h2>

<p>流量控制在网络栈的多个阶段都有，下图展示了发送数据要用到的缓存。</p>

<p><img src="http://www.cubrid.org/files/attach/images/1943/944/001/0459cdba18786920fb7cc32717e383c5.png" alt="" /></p>

<p>首先，应用产生数据并把它加到 socket 发送缓存中，如果缓存中没有空间，系统调用就会失败或者阻塞。因此，应用层发往内核的数据必须要通过 socket 缓存大小进行限制。</p>

<p>TCP 创建报文，并把报文发送到传输队列中（qdisc），这是一个典型的 FIFO 队列，队列的最大值可以通过 <code class="highlighter-rouge">ifocnfig</code> 命令输出的 <code class="highlighter-rouge">txqueuelen</code> 来查看。通常情况下，这个值在几千报文大小。</p>

<p>TX ring 在驱动和网卡之间，之前也说过，这是一个传输请求的队列。如果队列中没有空间，就无法执行传输请求，报文会在传输队列（qdisc）中堆积。如果堆积的报文太多，就会有报文被丢弃。</p>

<p>网卡把要发送的报文保存到内部的缓存中，这个缓存中的报文传输速率直接收到物理速率的影响（比如，1 Gb/s 的网卡不可能提供 10Gb/s 的性能）。如果网卡缓存中没有空闲的空间，传输报文就必须暂停。</p>

<p>如果内核中报文发送速率比网卡的报文处理速率高，那么报文就会集聚在网卡的缓存中。如果缓存中没有空闲空间，从　 TX ring 中处理传输报文就必须停止，那么会有更多的报文堆在　TX ring 中，直到最后队列中没有空间。驱动也没有没法执行传输请求，报文会堆在传输队列中。就像这样，底层的问题会通过缓存一层层网上传播。</p>

<p>下图展示了报文接收的流程：</p>

<p><img src="http://www.cubrid.org/files/attach/images/1943/944/001/353be9e9e64a78e66eb752301d764ab3.png" alt="" /></p>

<p>报文先保存在网卡的接收缓存中，从流量控制的角度看，驱动和网卡之间的 RX ring 可以看到报文的缓存。驱动从 RX ring 获取报文 ，然后把报文发送到上层。驱动和上层之间没有缓存，因为网卡驱动使用 NAPI 进行数据传输。因此，可以认为上层直接从 RX ring 中读取报文。报文的数据保存在 socket 接收缓存中，应用从 socket 接收缓存中读取数据。</p>

<p>不支持 NAPI 的驱动会先把报文保存到 backlog 对咯中，然后 NAPI 处理函数去队列中获取报文，因此 backlog 队列可以看到驱动和上层之间的缓存。</p>

<p>如果内核处理报文的速度小于报文流向网卡的速度，那么 RX ring 就会满，网卡的缓存也会满。如果有使用以太网流量控制，那么网卡会发送请求停止继续向网卡发送数据，或者直接丢包。</p>

<p>TCP socket 不会因为 socket 接收缓存没有空间就丢包，因为 TCP 提供的是端对端的流控。但是如果应用程序处理报文数据的速度很慢，UDP 会把报文丢弃，因为 UDP 不提供流量控制。</p>

<p>上面两个图中，驱动使用的 TX ring 和 RX ring 大小就是 <code class="highlighter-rouge">ethtool</code> 命令显示的 rings 大小。大多数对吞吐量有要求的情况下，提供 ring 大小和 socket 缓存大小很有用。提高这些大小，能够减少因为空间不够导致的失败率，而且能够提高发送和传输报文的速率。</p>

<h2 id="十二-总结">十二. 总结</h2>

<p>最初，我只是计划介绍一些网络知识，帮助读者去开发网络应用、执行性能测试以及调试性能问题。这篇文章的介绍内容很多，希望它能够在开发网络应用和监控网络性能方面对你提供帮助。 TCP/IP 协议本身很复杂，而且有很多特殊情况。幸运的是，你不用理解  TCP/IP 的所有代码才能理解和分析网络性能问题，这篇文章的知识应该就够了。</p>

<p>随着系统网络栈的不断发展，现在的服务器能毫无压力地提供 10-20 Gb/s 的吞吐率。而且还有很多的技术来提高性能，比如 TSO、LRO、RSS、GSO、GRO、UFO、XPS、IOAT、DDIO 和 TOE 等，这次词汇很让人迷惑。</p>

<p>在接下来的文章中，我会继续从性能角度解释网络栈，并讲解这些技术的问题和影响。</p>

    <p><a href="http://cizixs.com/2017/07/27/understand-tcp-ip-network-stack">【翻译】理解 TCP/IP 网络栈</a> was originally published by cizixs at <a href="http://cizixs.com">Cizixs Writes Here</a> on July 27, 2017.</p>
  