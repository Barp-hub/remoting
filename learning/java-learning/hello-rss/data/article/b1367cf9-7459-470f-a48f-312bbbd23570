<div dir="ltr" style="text-align: left;" trbidi="on">We know <a href="http://www.adftips.com/2010/10/adf-model-programmatically-executing.html">how to create view criteria declartively, execute it programatically</a> and use the query results as needed. But, creating a view criteria that uses 'in' clause is not possible declaratively. So, here we'll see how to form a query criteria that uses 'in' clause and also meets the performance standards.<br /><br />Here, we'll see how to to form a query statement to use list of values using SQL 'in' clause.<br /><br /><b>Requirement:</b> For example, we have a list of employee nos and we need to form an SQL like '<i>select * from emp where empno in (empno1, empno2, empno3, and so on)</i>'. Here, we should be able to form a query that can accept 'n' (where 'n' can be dynamic) no. of employee nos and use bind variables instead of hard coded the query.<br /><br /><b>Solution: </b>We don't have declarative way of forming query using 'in' clause. So, we have to do it programatically.<br /><br />For e.g., if the Empno list has 4 employee ids, we have to form the query like<br /><br /><div id="iframeDivf311cdf5-4ab1-4483-9766-cf550b2c6677" style="display: none; margin: 0px;"><iframe frameborder="0" id="iframef311cdf5-4ab1-4483-9766-cf550b2c6677" src="http://www.blogtrog.com/code.aspx?id=f311cdf5-4ab1-4483-9766-cf550b2c6677" style="border: 1px solid #e0e0e0; height: 70px; margin: 0px; width: 400px;"></iframe></div><div id="noIframeDivf311cdf5-4ab1-4483-9766-cf550b2c6677" style="display: block; margin: 0px;"><pre><div><br /><span style="color: blue;">select</span><span style="color: black;"> </span><span style="color: grey;">*</span><span style="color: black;"> </span><span style="color: blue;">from</span><span style="color: black;"> emp </span><span style="color: blue;">where</span><span style="color: black;"> empno </span><span style="color: grey;">in</span><span style="color: black;"> (:empno1,:empno2,:empno3,:empno4)</span></div><br /></pre></div><script language="javascript" src="http://www.blogtrog.com/scripts/bt_code.js" type="text/javascript"></script><script language="javascript" type="text/javascript">bt_code_init('f311cdf5-4ab1-4483-9766-cf550b2c6677'); </script>OR <br /><div id="iframeDived3bcf56-bbf2-49e7-96ae-5d6c1c4ce9b4" style="display: none; margin: 0px;"><iframe frameborder="0" id="iframeed3bcf56-bbf2-49e7-96ae-5d6c1c4ce9b4" src="http://www.blogtrog.com/code.aspx?id=ed3bcf56-bbf2-49e7-96ae-5d6c1c4ce9b4" style="border: 1px solid #e0e0e0; height: 60px; margin: 0px; width: 400px;"></iframe></div><div id="noIframeDived3bcf56-bbf2-49e7-96ae-5d6c1c4ce9b4" style="display: block; margin: 0px;"><pre><div><br /><span style="color: blue;">select</span><span style="color: black;"> </span><span style="color: grey;">*</span><span style="color: black;"> </span><span style="color: blue;">from</span><span style="color: black;"> emp </span><span style="color: blue;">where</span><span style="color: black;"> empno </span><span style="color: grey;">in</span><span style="color: black;"> (:</span><span style="color: maroon; font-weight: bold;">1</span><span style="color: black;">,:</span><span style="color: maroon; font-weight: bold;">2</span><span style="color: black;">,:</span><span style="color: maroon; font-weight: bold;">3</span><span style="color: black;">,:</span><span style="color: maroon; font-weight: bold;">4</span><span style="color: black;">)</span></div><br /></pre></div><script language="javascript" src="http://www.blogtrog.com/scripts/bt_code.js" type="text/javascript"></script><script language="javascript" type="text/javascript">bt_code_init('ed3bcf56-bbf2-49e7-96ae-5d6c1c4ce9b4'); </script><br />In the above SQL stmts, the first one uses the named bind parameters while the second one uses positional parameters.<br /><br />To achieve the above requirement, generate the 'in' clause programatically using the following methods.<br /><br />Forming 'in' clause with named bind parameters:<br /><div id="iframeDivfc3bdeb6-0931-425d-8b4c-2ccc558c0286" style="display: none; margin: 0px;"><iframe frameborder="0" id="iframefc3bdeb6-0931-425d-8b4c-2ccc558c0286" src="http://www.blogtrog.com/code.aspx?id=fc3bdeb6-0931-425d-8b4c-2ccc558c0286" style="border: 1px solid #e0e0e0; height: 200px; margin: 0px; width: 400px;"></iframe></div><div id="noIframeDivfc3bdeb6-0931-425d-8b4c-2ccc558c0286" style="display: block; margin: 0px;"><pre><div><br /><span style="color: black;">    </span><span style="color: blue;">private</span><span style="color: black;"> String getInClauseWithParamNames(List ids) {<br />        </span><span style="color: green;">//</span><span style="color: green;">logic to form the in clause with multiple bind variables</span><span style="color: green;"><br /></span><span style="color: black;">        StringBuffer inClause </span><span style="color: black;">=</span><span style="color: black;"> </span><span style="color: blue;">new</span><span style="color: black;"> StringBuffer();<br />        </span><span style="color: blue;">for</span><span style="color: black;"> (</span><span style="color: blue;">int</span><span style="color: black;"> i </span><span style="color: black;">=</span><span style="color: black;"> </span><span style="color: black;">1</span><span style="color: black;">; i </span><span style="color: black;">&lt;</span><span style="color: black;"> ids.size() </span><span style="color: black;">+</span><span style="color: black;"> </span><span style="color: black;">1</span><span style="color: black;">; i</span><span style="color: black;">++</span><span style="color: black;">) {<br />            inClause.append(</span><span style="color: black;">"</span><span style="color: black;">:empno</span><span style="color: black;">"</span><span style="color: black;"> </span><span style="color: black;">+</span><span style="color: black;"> (i));<br />            </span><span style="color: blue;">if</span><span style="color: black;"> (i </span><span style="color: black;">&lt;</span><span style="color: black;"> ids.size()) {<br />                inClause.append(</span><span style="color: black;">"</span><span style="color: black;">,</span><span style="color: black;">"</span><span style="color: black;">);<br />            }<br />        }<br />        </span><span style="color: blue;">return</span><span style="color: black;"> inClause.toString();<br />    }</span></div><br /></pre></div><script language="javascript" src="http://www.blogtrog.com/scripts/bt_code.js" type="text/javascript"></script><script language="javascript" type="text/javascript">bt_code_init('fc3bdeb6-0931-425d-8b4c-2ccc558c0286'); </script><br />Forming 'in' clause with positional bind parameters: <br /><div id="iframeDivee9d9836-7e69-4e94-8b3e-01127f4d0c20" style="display: none; margin: 0px;"><iframe frameborder="0" id="iframeee9d9836-7e69-4e94-8b3e-01127f4d0c20" src="http://www.blogtrog.com/code.aspx?id=ee9d9836-7e69-4e94-8b3e-01127f4d0c20" style="border: 1px solid #e0e0e0; height: 200px; margin: 0px; width: 400px;"></iframe></div><div id="noIframeDivee9d9836-7e69-4e94-8b3e-01127f4d0c20" style="display: block; margin: 0px;"><pre><div><br /><span style="color: black;">    </span><span style="color: blue;">private</span><span style="color: black;"> String getInClause(List ids) {<br />        </span><span style="color: green;">//</span><span style="color: green;">logic to form the in clause with multiple bind variables</span><span style="color: green;"><br /></span><span style="color: black;">        StringBuffer inClause </span><span style="color: black;">=</span><span style="color: black;"> </span><span style="color: blue;">new</span><span style="color: black;"> StringBuffer();<br />        </span><span style="color: blue;">for</span><span style="color: black;"> (</span><span style="color: blue;">int</span><span style="color: black;"> i </span><span style="color: black;">=</span><span style="color: black;"> </span><span style="color: black;">1</span><span style="color: black;">; i </span><span style="color: black;">&lt;</span><span style="color: black;"> ids.size() </span><span style="color: black;">+</span><span style="color: black;"> </span><span style="color: black;">1</span><span style="color: black;">; i</span><span style="color: black;">++</span><span style="color: black;">) {<br />            inClause.append(</span><span style="color: black;">"</span><span style="color: black;">:</span><span style="color: black;">"</span><span style="color: black;"> </span><span style="color: black;">+</span><span style="color: black;"> (i));<br />            </span><span style="color: blue;">if</span><span style="color: black;"> (i </span><span style="color: black;">&lt;</span><span style="color: black;"> ids.size()) {<br />                inClause.append(</span><span style="color: black;">"</span><span style="color: black;">,</span><span style="color: black;">"</span><span style="color: black;">);<br />            }<br />        }<br />        </span><span style="color: blue;">return</span><span style="color: black;"> inClause.toString();<br />    }</span></div><br /></pre></div><script language="javascript" src="http://www.blogtrog.com/scripts/bt_code.js" type="text/javascript"></script><script language="javascript" type="text/javascript">bt_code_init('ee9d9836-7e69-4e94-8b3e-01127f4d0c20'); </script><br />Use the generated 'in' clause with dynamic bind variables in the SQL stment and set the where clause programatically with vo.setWhereClause() method. Now, pass values for the bind variables progamatically and execute the query.&nbsp;<span style="background-color: white;">Sample code is given below:</span><br /><br />Using 'in' clause&nbsp;<span style="background-color: white;">with named bind parameters:</span><br /><div id="iframeDivd97b0c0e-12e6-4352-b9fa-933695fca5ec" style="display: none; margin: 0px;"><iframe frameborder="0" id="iframed97b0c0e-12e6-4352-b9fa-933695fca5ec" src="http://www.blogtrog.com/code.aspx?id=d97b0c0e-12e6-4352-b9fa-933695fca5ec" style="border: 1px solid #e0e0e0; height: 200px; margin: 0px; width: 400px;"></iframe></div><div id="noIframeDivd97b0c0e-12e6-4352-b9fa-933695fca5ec" style="display: block; margin: 0px;"><pre><div><br /><span style="color: black;">    </span><span style="color: blue;">public</span><span style="color: black;"> Row[] getEmployees1(List empIds) {<br />        ViewObjectImpl empVO </span><span style="color: black;">=</span><span style="color: black;"> </span><span style="color: blue;">this</span><span style="color: black;">.getEmpVO();<br />        String inClause </span><span style="color: black;">=</span><span style="color: black;"> getInClauseWithParamNames(empIds);<br />        </span><span style="color: green;">//</span><span style="color: green;">setting the where cluase to use the generated in clause</span><span style="color: green;"><br /></span><span style="color: black;">        empVO.setWhereClause(</span><span style="color: black;">"</span><span style="color: black;">EmpEO.EMPNO in (</span><span style="color: black;">"</span><span style="color: black;"> </span><span style="color: black;">+</span><span style="color: black;"> inClause </span><span style="color: black;">+</span><span style="color: black;"> </span><span style="color: black;">"</span><span style="color: black;">)</span><span style="color: black;">"</span><span style="color: black;">);<br />        </span><span style="color: green;">//</span><span style="color: green;">clearing all existing where clause params if any</span><span style="color: green;"><br /></span><span style="color: black;">        empVO.setWhereClauseParams(</span><span style="color: blue;">null</span><span style="color: black;">);<br />        </span><span style="color: green;">//</span><span style="color: green;">setting values for all bind variables one by one in the in clause</span><span style="color: green;"><br /></span><span style="color: black;">        </span><span style="color: blue;">for</span><span style="color: black;"> (</span><span style="color: blue;">int</span><span style="color: black;"> i </span><span style="color: black;">=</span><span style="color: black;"> </span><span style="color: black;">0</span><span style="color: black;">; i </span><span style="color: black;">&lt;</span><span style="color: black;"> empIds.size(); i</span><span style="color: black;">++</span><span style="color: black;">) {<br />            </span><span style="color: green;">//</span><span style="color: green;">defining the named bind variables programatically</span><span style="color: green;"><br /></span><span style="color: black;">            empVO.defineNamedWhereClauseParam(</span><span style="color: black;">"</span><span style="color: black;">empno</span><span style="color: black;">"</span><span style="color: black;"> </span><span style="color: black;">+</span><span style="color: black;"> (i </span><span style="color: black;">+</span><span style="color: black;"> </span><span style="color: black;">1</span><span style="color: black;">), </span><span style="color: blue;">null</span><span style="color: black;">, </span><span style="color: blue;">null</span><span style="color: black;">);<br />            </span><span style="color: green;">//</span><span style="color: green;">setting the value for each named bind variable</span><span style="color: green;"><br /></span><span style="color: black;">            empVO.setNamedWhereClauseParam(</span><span style="color: black;">"</span><span style="color: black;">empno</span><span style="color: black;">"</span><span style="color: black;"> </span><span style="color: black;">+</span><span style="color: black;"> (i </span><span style="color: black;">+</span><span style="color: black;"> </span><span style="color: black;">1</span><span style="color: black;">), empIds.get(i));<br />        }<br />        empVO.setRangeSize(</span><span style="color: black;">-</span><span style="color: black;">1</span><span style="color: black;">);<br />        </span><span style="color: green;">//</span><span style="color: green;">executing the query</span><span style="color: green;"><br /></span><span style="color: black;">        empVO.executeQuery();<br />        </span><span style="color: green;">//</span><span style="color: green;">returning the rows from query result</span><span style="color: green;"><br /></span><span style="color: black;">        </span><span style="color: blue;">return</span><span style="color: black;"> empVO.getAllRowsInRange();<br />    }</span></div><br /></pre></div><script language="javascript" src="http://www.blogtrog.com/scripts/bt_code.js" type="text/javascript"></script><script language="javascript" type="text/javascript">bt_code_init('d97b0c0e-12e6-4352-b9fa-933695fca5ec'); </script><br />Using 'in' clause with positional bind parameters:<br /><div id="iframeDiv60e3c085-30ed-4bbc-907e-8d103d3e00fe" style="display: none; margin: 0px;"><iframe frameborder="0" id="iframe60e3c085-30ed-4bbc-907e-8d103d3e00fe" src="http://www.blogtrog.com/code.aspx?id=60e3c085-30ed-4bbc-907e-8d103d3e00fe" style="border: 1px solid #e0e0e0; height: 200px; margin: 0px; width: 400px;"></iframe></div><div id="noIframeDiv60e3c085-30ed-4bbc-907e-8d103d3e00fe" style="display: block; margin: 0px;"><pre><div><br /><span style="color: black;">    </span><span style="color: blue;">public</span><span style="color: black;"> Row[] getEmployees(List empIds) {<br />        ViewObjectImpl empVO </span><span style="color: black;">=</span><span style="color: black;"> </span><span style="color: blue;">this</span><span style="color: black;">.getEmpVO();<br />        String inClause </span><span style="color: black;">=</span><span style="color: black;"> getInClause(empIds);<br />        </span><span style="color: green;">//</span><span style="color: green;">setting the where cluase to use the generated in clause</span><span style="color: green;"><br /></span><span style="color: black;">        empVO.setWhereClause(</span><span style="color: black;">"</span><span style="color: black;">EmpEO.EMPNO in (</span><span style="color: black;">"</span><span style="color: black;"> </span><span style="color: black;">+</span><span style="color: black;"> inClause </span><span style="color: black;">+</span><span style="color: black;"> </span><span style="color: black;">"</span><span style="color: black;">)</span><span style="color: black;">"</span><span style="color: black;">);<br />        </span><span style="color: green;">//</span><span style="color: green;">clearing all existing where clause params if any</span><span style="color: green;"><br /></span><span style="color: black;">        empVO.setWhereClauseParams(</span><span style="color: blue;">null</span><span style="color: black;">);<br />        </span><span style="color: green;">//</span><span style="color: green;">setting values for all bind variables one by one in the in clause</span><span style="color: green;"><br /></span><span style="color: black;">        </span><span style="color: blue;">for</span><span style="color: black;"> (</span><span style="color: blue;">int</span><span style="color: black;"> i </span><span style="color: black;">=</span><span style="color: black;"> </span><span style="color: black;">0</span><span style="color: black;">; i </span><span style="color: black;">&lt;</span><span style="color: black;"> empIds.size(); i</span><span style="color: black;">++</span><span style="color: black;">) {<br />            </span><span style="color: green;">//</span><span style="color: green;">setting the value for each positional bind variable</span><span style="color: green;"><br /></span><span style="color: black;">            empVO.setWhereClauseParam(i, empIds.get(i));<br />        }<br />        empVO.setRangeSize(</span><span style="color: black;">-</span><span style="color: black;">1</span><span style="color: black;">);<br />        </span><span style="color: green;">//</span><span style="color: green;">executing the query</span><span style="color: green;"><br /></span><span style="color: black;">        empVO.executeQuery();<br />        </span><span style="color: green;">//</span><span style="color: green;">returning the resultant rows</span><span style="color: green;"><br /></span><span style="color: black;">        </span><span style="color: blue;">return</span><span style="color: black;"> empVO.getAllRowsInRange();<br />    }</span></div><br /></pre></div><script language="javascript" src="http://www.blogtrog.com/scripts/bt_code.js" type="text/javascript"></script><script language="javascript" type="text/javascript">bt_code_init('60e3c085-30ed-4bbc-907e-8d103d3e00fe'); </script><br />Sample method that forms list of empnos, calls the above methods, gets the required results and prints the results:<br /><div id="iframeDivb1fd9f01-cee1-4d0f-bb81-1f1b4caca275" style="display: none; margin: 0px;"><iframe frameborder="0" id="iframeb1fd9f01-cee1-4d0f-bb81-1f1b4caca275" src="http://www.blogtrog.com/code.aspx?id=b1fd9f01-cee1-4d0f-bb81-1f1b4caca275" style="border: 1px solid #e0e0e0; height: 200px; margin: 0px; width: 400px;"></iframe></div><div id="noIframeDivb1fd9f01-cee1-4d0f-bb81-1f1b4caca275" style="display: block; margin: 0px;"><pre><div><br /><span style="color: black;">    </span><span style="color: blue;">public</span><span style="color: black;"> </span><span style="color: blue;">void</span><span style="color: black;"> sampleMethod() {<br />        </span><span style="color: green;">//</span><span style="color: green;">Forming a list of employee ids</span><span style="color: green;"><br /></span><span style="color: black;">        List</span><span style="color: black;">&lt;</span><span style="color: black;">Long</span><span style="color: black;">&gt;</span><span style="color: black;"> empIds </span><span style="color: black;">=</span><span style="color: black;"> </span><span style="color: blue;">new</span><span style="color: black;"> ArrayList</span><span style="color: black;">&lt;</span><span style="color: black;">Long</span><span style="color: black;">&gt;</span><span style="color: black;">();<br />        empIds.add(</span><span style="color: blue;">new</span><span style="color: black;"> Long(</span><span style="color: black;">7499</span><span style="color: black;">));<br />        empIds.add(</span><span style="color: blue;">new</span><span style="color: black;"> Long(</span><span style="color: black;">7521</span><span style="color: black;">));<br />        empIds.add(</span><span style="color: blue;">new</span><span style="color: black;"> Long(</span><span style="color: black;">7566</span><span style="color: black;">));<br />        empIds.add(</span><span style="color: blue;">new</span><span style="color: black;"> Long(</span><span style="color: black;">7654</span><span style="color: black;">));<br />        empIds.add(</span><span style="color: blue;">new</span><span style="color: black;"> Long(</span><span style="color: black;">7698</span><span style="color: black;">));<br />        empIds.add(</span><span style="color: blue;">new</span><span style="color: black;"> Long(</span><span style="color: black;">7788</span><span style="color: black;">));<br />        <br />        </span><span style="color: green;">//</span><span style="color: green;">Get employee rows from list of empIds<br />        </span><span style="color: green;">//</span><span style="color: green;">1. Using positional parameters<br />        </span><span style="color: green;">//</span><span style="color: green;">Row[] empRows = getEmployees(empIds);<br />        </span><span style="color: green;">//</span><span style="color: green;">2. Using named bind parameters</span><span style="color: green;"><br /></span><span style="color: black;">        Row[] empRows </span><span style="color: black;">=</span><span style="color: black;"> getEmployees1(empIds);<br /><br />        </span><span style="color: green;">//</span><span style="color: green;">iterating through the employee rows and printing the emp name</span><span style="color: green;"><br /></span><span style="color: black;">        </span><span style="color: blue;">for</span><span style="color: black;"> (</span><span style="color: blue;">int</span><span style="color: black;"> i </span><span style="color: black;">=</span><span style="color: black;"> </span><span style="color: black;">0</span><span style="color: black;">; i </span><span style="color: black;">&lt;</span><span style="color: black;"> empRows.length; i</span><span style="color: black;">++</span><span style="color: black;">) {<br />            Row empRow </span><span style="color: black;">=</span><span style="color: black;"> empRows[i];<br />            System.out.println(</span><span style="color: black;">"</span><span style="color: black;">Emp Name </span><span style="color: black;">"</span><span style="color: black;"> </span><span style="color: black;">+</span><span style="color: black;"> (i </span><span style="color: black;">+</span><span style="color: black;"> </span><span style="color: black;">1</span><span style="color: black;">) </span><span style="color: black;">+</span><span style="color: black;"> </span><span style="color: black;">"</span><span style="color: black;">: </span><span style="color: black;">"</span><span style="color: black;"> </span><span style="color: black;">+</span><span style="color: black;"><br />                               empRow.getAttribute(</span><span style="color: black;">"</span><span style="color: black;">Ename</span><span style="color: black;">"</span><span style="color: black;">));<br />        }<br />    }</span></div><br /></pre></div><script language="javascript" src="http://www.blogtrog.com/scripts/bt_code.js" type="text/javascript"></script><script language="javascript" type="text/javascript">bt_code_init('b1fd9f01-cee1-4d0f-bb81-1f1b4caca275'); </script><br />The above code is self-explanatory. <a href="http://adftips.googlecode.com/files/DyanamicInClause.zip">You can download the sample application from here</a>. Once downloaded, run/debug the DemoAM and execute the sampleMethod. You'll get the following result:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-mnqLvPh8PcM/UBLk-feRfsI/AAAAAAAAAZY/4XkPMvGKOSI/s1600/Snap2.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-mnqLvPh8PcM/UBLk-feRfsI/AAAAAAAAAZY/4XkPMvGKOSI/s1600/Snap2.jpg" /></a></div><br />If you look at the log window, you can see the SQL query statements generated as below at runtime.<br /><br /><span style="background-color: white;">Generated SQL stmt with named bind variables:</span><br /><a href="http://3.bp.blogspot.com/-ymjyEaNuwvs/UBLlAoNzITI/AAAAAAAAAZg/r1wO2JeqIno/s1600/Snap3.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em; text-align: center;"><img border="0" src="http://3.bp.blogspot.com/-ymjyEaNuwvs/UBLlAoNzITI/AAAAAAAAAZg/r1wO2JeqIno/s1600/Snap3.jpg" /></a><br /><br />Generated SQL stmt with positional bind variables: <br /><div><a href="http://3.bp.blogspot.com/--_EM3mXW-js/UBLk9fV7wEI/AAAAAAAAAZQ/SgUWhyXDFD4/s1600/Snap1.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em; text-align: center;"><img border="0" src="http://3.bp.blogspot.com/--_EM3mXW-js/UBLk9fV7wEI/AAAAAAAAAZQ/SgUWhyXDFD4/s1600/Snap1.jpg" /></a></div><br /><span style="background-color: white;">This query statement uses bind variables instead of hard coded the statement and results in a prepared statement at runtime. Hence, the stmt will be compiled only once and the same will be reused for multiple calls. So, this is the most performant way of generating and executing the SQL programatically.</span></div>