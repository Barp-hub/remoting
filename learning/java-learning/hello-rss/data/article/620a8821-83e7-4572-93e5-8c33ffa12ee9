
    <p>前几篇源码分析的文章介绍了 kubelet 提供的各种功能，这篇文章继续介绍 kubelet 的源码部分：事件机制。事件并不是 kubelet 对外提供的功能，但是对于 kubernetes 系统却非常重要。</p>

<h2 id="kubelet-事件机制">kubelet 事件机制</h2>

<p>我们知道 kubernetes 是分布式的架构，apiserver 是整个集群的交互中心，客户端主要和它打交道，kubelet 是各个节点上的 worker，负责执行具体的任务。对于用户来说，每次创建资源的时候，除了看到它的最终状态（一般是运行态），希望看到资源执行的过程，中间经过了哪些步骤。这些反馈信息对于调试来说非常重要，有些任务会失败或者卡在某个步骤，有了这些信息，我们就能够准确地定位问题。</p>

<p>kubelet 需要把关键步骤中的执行事件发送到 apiserver，这样客户端就能通过查询知道整个流程发生了哪些事情，不需要登录到 kubelet 所在的节点查看日志的内容或者容器的运行状态。</p>

<h2 id="事件机制源码分析">事件机制源码分析</h2>

<p>这部分我们讲直接分析 kubelet 的源码，了解事件机制实现的来龙去脉。</p>

<h3 id="谁会发送事件">谁会发送事件？</h3>

<p>kubernetes 是以 pod 为核心概念的，不管是 deployment、statefulSet、replicaSet，最终都会创建出来 pod。因此事件机制也是围绕 pod 进行的，在 pod 生命周期的关键步骤都会产生事件消息。比如 Controller Manager 会记录节点注册和销毁的事件、Deployment 扩容和升级的事件；kubelet 会记录镜像回收事件、volume 无法挂载事件等；Scheduler 会记录调度事件等。这篇文章只关心 kubelet 的情况，其他组件实现原理是一样的。</p>

<p>查看 <code class="highlighter-rouge">pkg/kubelet/kubelet.go</code> 文件的代码，你会看到类似下面的代码：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kl</span><span class="o">.</span><span class="n">recorder</span><span class="o">.</span><span class="n">Eventf</span><span class="p">(</span><span class="n">kl</span><span class="o">.</span><span class="n">nodeRef</span><span class="p">,</span><span class="x"> </span><span class="n">api</span><span class="o">.</span><span class="n">EventTypeWarning</span><span class="p">,</span><span class="x"> </span><span class="n">events</span><span class="o">.</span><span class="n">ContainerGCFailed</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">())</span><span class="x">
</span></code></pre></div></div>

<p>上面这行代码是容器 GC 失败的时候出现的，它发送了一条事件消息，通知 apiserver 容器 GC 失败的原因。除了 kubelet 本身之外，kubelet 的各个组件（比如 imageManager、probeManager 等）也会有这个字段，记录重要的事件，读者可以搜索源码去看 kubelet 哪些地方会发送事件。</p>

<p><code class="highlighter-rouge">recorder</code> 是 kubelet 结构的一个字段：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span><span class="x"> </span><span class="n">kubelet</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="o">...</span><span class="x">
    </span><span class="c">// The EventBroader to use</span><span class="x">
    </span><span class="n">recorder</span><span class="x">    </span><span class="n">record</span><span class="o">.</span><span class="n">EventRecorder</span><span class="x">
    </span><span class="o">...</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre></div></div>

<p>它的类型是 <code class="highlighter-rouge">record.EventRecorder</code>，这是个定义了三个方法的  interface，代码在  <code class="highlighter-rouge">pkg/client/record/event.go</code> 文件中：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span><span class="x"> </span><span class="n">EventRecorder</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Event</span><span class="p">(</span><span class="n">object</span><span class="x"> </span><span class="n">runtime</span><span class="o">.</span><span class="n">Object</span><span class="p">,</span><span class="x"> </span><span class="n">eventtype</span><span class="p">,</span><span class="x"> </span><span class="n">reason</span><span class="p">,</span><span class="x"> </span><span class="n">message</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x">

	</span><span class="n">Eventf</span><span class="p">(</span><span class="n">object</span><span class="x"> </span><span class="n">runtime</span><span class="o">.</span><span class="n">Object</span><span class="p">,</span><span class="x"> </span><span class="n">eventtype</span><span class="p">,</span><span class="x"> </span><span class="n">reason</span><span class="p">,</span><span class="x"> </span><span class="n">messageFmt</span><span class="x"> </span><span class="kt">string</span><span class="p">,</span><span class="x"> </span><span class="n">args</span><span class="x"> </span><span class="o">...</span><span class="k">interface</span><span class="p">{})</span><span class="x">

	</span><span class="n">PastEventf</span><span class="p">(</span><span class="n">object</span><span class="x"> </span><span class="n">runtime</span><span class="o">.</span><span class="n">Object</span><span class="p">,</span><span class="x"> </span><span class="n">timestamp</span><span class="x"> </span><span class="n">unversioned</span><span class="o">.</span><span class="n">Time</span><span class="p">,</span><span class="x"> </span><span class="n">eventtype</span><span class="p">,</span><span class="x"> </span><span class="n">reason</span><span class="p">,</span><span class="x"> </span><span class="n">messageFmt</span><span class="x"> </span><span class="kt">string</span><span class="p">,</span><span class="x"> </span><span class="n">args</span><span class="x"> </span><span class="o">...</span><span class="k">interface</span><span class="p">{})</span><span class="x">
</span></code></pre></div></div>

<p>这里的三个方法都是记录事件用的，<code class="highlighter-rouge">Eventf</code> 就是封装了类似 <code class="highlighter-rouge">Printf</code> 的信息打印机制，内部也会调用 <code class="highlighter-rouge">Event</code>，而 <code class="highlighter-rouge">PastEventf</code> 允许用户传进来自定义的时间戳，因此可以设置事件产生的时间。我们后面会详解介绍它们参数的意思和内部实现。</p>

<h3 id="eventrecorder-和-eventbroadcaster">EventRecorder 和 EventBroadcaster</h3>

<p>我们已经知道了 <code class="highlighter-rouge">recorder</code> 就是事件的负责人，那么接下来就要了解它是怎么实现事件发送机制的。不过在那之前，先让我们找到 <code class="highlighter-rouge">recorder</code> 是什么时候被创建的？</p>

<p>在 <a href="http://cizixs.com/2017/06/06/kubelet-source-code-analysis-part-1">kubelet 启动流程</a> 这篇文章中，我们讲到 <code class="highlighter-rouge">RunKubelet</code> 中会初始化 <code class="highlighter-rouge">EventBroadcaster</code> 和 <code class="highlighter-rouge">Recorder</code>，对应的代码如下：</p>

<p><code class="highlighter-rouge">cmd/kubelet/app/server.go#RunKubelet</code>：</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">eventBroadcaster</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">record</span><span class="o">.</span><span class="n">NewBroadcaster</span><span class="p">()</span><span class="x">
</span><span class="n">kubeDeps</span><span class="o">.</span><span class="n">Recorder</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">eventBroadcaster</span><span class="o">.</span><span class="n">NewRecorder</span><span class="p">(</span><span class="n">api</span><span class="o">.</span><span class="n">EventSource</span><span class="p">{</span><span class="n">Component</span><span class="o">:</span><span class="x"> </span><span class="s">"kubelet"</span><span class="p">,</span><span class="x"> </span><span class="n">Host</span><span class="o">:</span><span class="x"> </span><span class="kt">string</span><span class="p">(</span><span class="n">nodeName</span><span class="p">)})</span><span class="x">
</span><span class="n">eventBroadcaster</span><span class="o">.</span><span class="n">StartLogging</span><span class="p">(</span><span class="n">glog</span><span class="o">.</span><span class="n">V</span><span class="p">(</span><span class="m">3</span><span class="p">)</span><span class="o">.</span><span class="n">Infof</span><span class="p">)</span><span class="x">

</span><span class="k">if</span><span class="x"> </span><span class="n">kubeDeps</span><span class="o">.</span><span class="n">EventClient</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">eventBroadcaster</span><span class="o">.</span><span class="n">StartRecordingToSink</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unversionedcore</span><span class="o">.</span><span class="n">EventSinkImpl</span><span class="p">{</span><span class="n">Interface</span><span class="o">:</span><span class="x"> </span><span class="n">kubeDeps</span><span class="o">.</span><span class="n">EventClient</span><span class="o">.</span><span class="n">Events</span><span class="p">(</span><span class="s">""</span><span class="p">)})</span><span class="x">
</span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">glog</span><span class="o">.</span><span class="n">Warning</span><span class="p">(</span><span class="s">"No api server defined - no events will be sent to API server."</span><span class="p">)</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre></div></div>

<p>正如名字所示的那样， <code class="highlighter-rouge">eventBroadcaster</code> 是个事件广播器，<code class="highlighter-rouge">StartLogging</code> 和 <code class="highlighter-rouge">StartRecordingToSink</code> 创建了两个不同的事件处理函数，分别把事件记录到日志和发送给 apiserver。而 <code class="highlighter-rouge">NewRecorder</code> 新建了一个 <code class="highlighter-rouge">Recoder</code> 对象，通过它的 <code class="highlighter-rouge">Event</code>、<code class="highlighter-rouge">Eventf</code> 和 <code class="highlighter-rouge">PastEventf</code> 方法，用户可以往里面发送事件，<code class="highlighter-rouge">eventBroadcaster</code> 会把接收到的事件发送个多个处理函数，比如这里提到的写日志和发送到 apiserver。</p>

<p>知道了 <code class="highlighter-rouge">EventBroadcaster</code> 的功能，我们来看看它的实现：</p>

<p><code class="highlighter-rouge">pkg/client/record/event.go</code></p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span><span class="x"> </span><span class="n">EventBroadcaster</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">StartEventWatcher</span><span class="p">(</span><span class="n">eventHandler</span><span class="x"> </span><span class="k">func</span><span class="p">(</span><span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">Event</span><span class="p">))</span><span class="x"> </span><span class="n">watch</span><span class="o">.</span><span class="n">Interface</span><span class="x">
	</span><span class="n">StartRecordingToSink</span><span class="p">(</span><span class="n">sink</span><span class="x"> </span><span class="n">EventSink</span><span class="p">)</span><span class="x"> </span><span class="n">watch</span><span class="o">.</span><span class="n">Interface</span><span class="x">
	</span><span class="n">StartLogging</span><span class="p">(</span><span class="n">logf</span><span class="x"> </span><span class="k">func</span><span class="p">(</span><span class="n">format</span><span class="x"> </span><span class="kt">string</span><span class="p">,</span><span class="x"> </span><span class="n">args</span><span class="x"> </span><span class="o">...</span><span class="k">interface</span><span class="p">{}))</span><span class="x"> </span><span class="n">watch</span><span class="o">.</span><span class="n">Interface</span><span class="x">

	</span><span class="n">NewRecorder</span><span class="p">(</span><span class="n">source</span><span class="x"> </span><span class="n">api</span><span class="o">.</span><span class="n">EventSource</span><span class="p">)</span><span class="x"> </span><span class="n">EventRecorder</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">EventBroadcaster</code> 是个接口类型，<code class="highlighter-rouge">NewRecorder</code> 新建一个 <code class="highlighter-rouge">EventRecoder</code> 对象，它就像一个事件记录仪，用户可以通过它记录事件，它在内部会把事件发送给 <code class="highlighter-rouge">EventBroadcaster</code>。</p>

<p>此外，<code class="highlighter-rouge">EventBroadcaster</code> 定义了三个 <code class="highlighter-rouge">Start</code> 开头的方法，它们用来添加事件处理 handler 。其中核心方法是 <code class="highlighter-rouge">StartEventWatcher</code>，它会在后台启动一个 goroutine，不断从 EventBroadcaster 提供的管道中接收事件，然后调用 <code class="highlighter-rouge">eventHandler</code> 处理函数对事件进行处理。<code class="highlighter-rouge">StartRecordingToSink</code> 和 <code class="highlighter-rouge">StartLogging</code> 是对 <code class="highlighter-rouge">StartEventWatcher</code> 的封装，分别实现了不同的处理函数（发送给 apiserver 和写日志）。</p>

<p>至此，<code class="highlighter-rouge">EventBroadcaster</code> 的工作原理就比较清晰了：它通过 <code class="highlighter-rouge">EventRecorder</code> 提供接口供用户写事件，内部把接收到的事件发送给处理函数。处理函数是可以扩展的，用户可以通过 <code class="highlighter-rouge">StartEventWatcher</code> 来编写自己的事件处理逻辑，<code class="highlighter-rouge">kubelet</code> 默认会使用 <code class="highlighter-rouge">StartRecordingToSink</code> 和 <code class="highlighter-rouge">StartLogging</code>，也就是说任何一个事件会同时发送给 apiserver，并打印到日志中。</p>

<p>知道了 <code class="highlighter-rouge">EventBroadcaster</code> 做的事情，接下来我们就要分析它是怎么做的。这些内容可以分为三个部分：</p>

<ol>
  <li><code class="highlighter-rouge">EventRecorder</code> 是怎么把事件发送给 <code class="highlighter-rouge">EventBroadcaster</code> 的？</li>
  <li><code class="highlighter-rouge">EventBroadcaster</code> 是怎么实现事件广播的？</li>
  <li><code class="highlighter-rouge">StartRecodingToSink</code> 内部是如何把事件发送到 apiserver 的？</li>
</ol>

<p>分析完以上三点，我们就能知道事件的整个流程。</p>

<h3 id="发送事件的过程">发送事件的过程</h3>

<p>通过上面的分析，我们知道事件是通过 <code class="highlighter-rouge">EventRecorder</code> 对象发送出来的，它的具体实现在 <code class="highlighter-rouge">pkg/event/record/event.go</code>：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span><span class="x"> </span><span class="n">recorderImpl</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">source</span><span class="x"> </span><span class="n">api</span><span class="o">.</span><span class="n">EventSource</span><span class="x">
	</span><span class="o">*</span><span class="n">watch</span><span class="o">.</span><span class="n">Broadcaster</span><span class="x">
	</span><span class="n">clock</span><span class="x"> </span><span class="n">clock</span><span class="o">.</span><span class="n">Clock</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">eventBroadcaster</span><span class="x"> </span><span class="o">*</span><span class="n">eventBroadcasterImpl</span><span class="p">)</span><span class="x"> </span><span class="n">NewRecorder</span><span class="p">(</span><span class="n">source</span><span class="x"> </span><span class="n">api</span><span class="o">.</span><span class="n">EventSource</span><span class="p">)</span><span class="x"> </span><span class="n">EventRecorder</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="k">return</span><span class="x"> </span><span class="o">&amp;</span><span class="n">recorderImpl</span><span class="p">{</span><span class="n">source</span><span class="p">,</span><span class="x"> </span><span class="n">eventBroadcaster</span><span class="o">.</span><span class="n">Broadcaster</span><span class="p">,</span><span class="x"> </span><span class="n">clock</span><span class="o">.</span><span class="n">RealClock</span><span class="p">{}}</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">recorder</span><span class="x"> </span><span class="o">*</span><span class="n">recorderImpl</span><span class="p">)</span><span class="x"> </span><span class="n">Event</span><span class="p">(</span><span class="n">object</span><span class="x"> </span><span class="n">runtime</span><span class="o">.</span><span class="n">Object</span><span class="p">,</span><span class="x"> </span><span class="n">eventtype</span><span class="p">,</span><span class="x"> </span><span class="n">reason</span><span class="p">,</span><span class="x"> </span><span class="n">message</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">recorder</span><span class="o">.</span><span class="n">generateEvent</span><span class="p">(</span><span class="n">object</span><span class="p">,</span><span class="x"> </span><span class="n">unversioned</span><span class="o">.</span><span class="n">Now</span><span class="p">(),</span><span class="x"> </span><span class="n">eventtype</span><span class="p">,</span><span class="x"> </span><span class="n">reason</span><span class="p">,</span><span class="x"> </span><span class="n">message</span><span class="p">)</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">recorder</span><span class="x"> </span><span class="o">*</span><span class="n">recorderImpl</span><span class="p">)</span><span class="x"> </span><span class="n">Eventf</span><span class="p">(</span><span class="n">object</span><span class="x"> </span><span class="n">runtime</span><span class="o">.</span><span class="n">Object</span><span class="p">,</span><span class="x"> </span><span class="n">eventtype</span><span class="p">,</span><span class="x"> </span><span class="n">reason</span><span class="p">,</span><span class="x"> </span><span class="n">messageFmt</span><span class="x"> </span><span class="kt">string</span><span class="p">,</span><span class="x"> </span><span class="n">args</span><span class="x"> </span><span class="o">...</span><span class="k">interface</span><span class="p">{})</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">recorder</span><span class="o">.</span><span class="n">Event</span><span class="p">(</span><span class="n">object</span><span class="p">,</span><span class="x"> </span><span class="n">eventtype</span><span class="p">,</span><span class="x"> </span><span class="n">reason</span><span class="p">,</span><span class="x"> </span><span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="n">messageFmt</span><span class="p">,</span><span class="x"> </span><span class="n">args</span><span class="o">...</span><span class="p">))</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">recorder</span><span class="x"> </span><span class="o">*</span><span class="n">recorderImpl</span><span class="p">)</span><span class="x"> </span><span class="n">PastEventf</span><span class="p">(</span><span class="n">object</span><span class="x"> </span><span class="n">runtime</span><span class="o">.</span><span class="n">Object</span><span class="p">,</span><span class="x"> </span><span class="n">timestamp</span><span class="x"> </span><span class="n">unversioned</span><span class="o">.</span><span class="n">Time</span><span class="p">,</span><span class="x"> </span><span class="n">eventtype</span><span class="p">,</span><span class="x"> </span><span class="n">reason</span><span class="p">,</span><span class="x"> </span><span class="n">messageFmt</span><span class="x"> </span><span class="kt">string</span><span class="p">,</span><span class="x"> </span><span class="n">args</span><span class="x"> </span><span class="o">...</span><span class="k">interface</span><span class="p">{})</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">recorder</span><span class="o">.</span><span class="n">generateEvent</span><span class="p">(</span><span class="n">object</span><span class="p">,</span><span class="x"> </span><span class="n">timestamp</span><span class="p">,</span><span class="x"> </span><span class="n">eventtype</span><span class="p">,</span><span class="x"> </span><span class="n">reason</span><span class="p">,</span><span class="x"> </span><span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="n">messageFmt</span><span class="p">,</span><span class="x"> </span><span class="n">args</span><span class="o">...</span><span class="p">))</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">recorderImpl</code> 是具体的实现，<code class="highlighter-rouge">eventBroadcaster.NewRecorder</code> 会创建一个指定 <code class="highlighter-rouge">EventSource</code> 的 <code class="highlighter-rouge">EventRecorder</code>，<code class="highlighter-rouge">EventSource</code> 指明了哪个节点的哪个组件。</p>

<p>recorder 对外暴露了三个方法：<code class="highlighter-rouge">Event</code>、<code class="highlighter-rouge">Eventf</code> 和 <code class="highlighter-rouge">PastEventf</code>，它们的内部最终都是调用 <code class="highlighter-rouge">generateEvent</code> 方法：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">recorder</span><span class="x"> </span><span class="o">*</span><span class="n">recorderImpl</span><span class="p">)</span><span class="x"> </span><span class="n">generateEvent</span><span class="p">(</span><span class="n">object</span><span class="x"> </span><span class="n">runtime</span><span class="o">.</span><span class="n">Object</span><span class="p">,</span><span class="x"> </span><span class="n">timestamp</span><span class="x"> </span><span class="n">unversioned</span><span class="o">.</span><span class="n">Time</span><span class="p">,</span><span class="x"> </span><span class="n">eventtype</span><span class="p">,</span><span class="x"> </span><span class="n">reason</span><span class="p">,</span><span class="x"> </span><span class="n">message</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">ref</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">api</span><span class="o">.</span><span class="n">GetReference</span><span class="p">(</span><span class="n">object</span><span class="p">)</span><span class="x">
    </span><span class="o">......</span><span class="x">

	</span><span class="k">if</span><span class="x"> </span><span class="o">!</span><span class="n">validateEventType</span><span class="p">(</span><span class="n">eventtype</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">glog</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Unsupported event type: '%v'"</span><span class="p">,</span><span class="x"> </span><span class="n">eventtype</span><span class="p">)</span><span class="x">
		</span><span class="k">return</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="n">event</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">recorder</span><span class="o">.</span><span class="n">makeEvent</span><span class="p">(</span><span class="n">ref</span><span class="p">,</span><span class="x"> </span><span class="n">eventtype</span><span class="p">,</span><span class="x"> </span><span class="n">reason</span><span class="p">,</span><span class="x"> </span><span class="n">message</span><span class="p">)</span><span class="x">

	</span><span class="k">if</span><span class="x"> </span><span class="n">pod</span><span class="p">,</span><span class="x"> </span><span class="n">ok</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">object</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">Pod</span><span class="p">);</span><span class="x"> </span><span class="n">ok</span><span class="x"> </span><span class="o">&amp;&amp;</span><span class="x"> </span><span class="n">pod</span><span class="o">.</span><span class="n">ObjectMeta</span><span class="o">.</span><span class="n">Labels</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="c">// add the labels in pod to event</span><span class="x">
		</span><span class="n">event</span><span class="o">.</span><span class="n">ObjectMeta</span><span class="o">.</span><span class="n">Labels</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{}</span><span class="x">
		</span><span class="k">for</span><span class="x"> </span><span class="n">k</span><span class="p">,</span><span class="x"> </span><span class="n">v</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="k">range</span><span class="x"> </span><span class="n">pod</span><span class="o">.</span><span class="n">ObjectMeta</span><span class="o">.</span><span class="n">Labels</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">event</span><span class="o">.</span><span class="n">ObjectMeta</span><span class="o">.</span><span class="n">Labels</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">v</span><span class="x">
		</span><span class="p">}</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="n">event</span><span class="o">.</span><span class="n">Source</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">recorder</span><span class="o">.</span><span class="n">source</span><span class="x">

	</span><span class="k">go</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">defer</span><span class="x"> </span><span class="n">utilruntime</span><span class="o">.</span><span class="n">HandleCrash</span><span class="p">()</span><span class="x">
		</span><span class="n">recorder</span><span class="o">.</span><span class="n">Action</span><span class="p">(</span><span class="n">watch</span><span class="o">.</span><span class="n">Added</span><span class="p">,</span><span class="x"> </span><span class="n">event</span><span class="p">)</span><span class="x">
	</span><span class="p">}()</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">generateEvent</code> 就是根据传入的参数，生成一个 <code class="highlighter-rouge">api.Event</code> 对象，并发送出去。它各个参数的意思是：</p>

<ul>
  <li>object：哪个组件/对象发出的事件，比如 kubelet 产生的事件会使用 node 对象</li>
  <li>timestamp：事件产生的时间</li>
  <li>eventtype：事件类型，目前有两种：<code class="highlighter-rouge">Normal</code> 和 <code class="highlighter-rouge">Warning</code>，分别代表正常的事件和可能有问题的事件，定义在 <code class="highlighter-rouge">pkg/api/types.go</code> 文件中，未来可能有其他类型的事件扩展</li>
  <li>reason：事件产生的原因，可以在 <code class="highlighter-rouge">pkg/kubelet/events/event.go</code> 看到 kubelet 定义的所有事件类型</li>
  <li>message：事件的具体内容，用户可以理解的语句</li>
</ul>

<p><code class="highlighter-rouge">makeEvent</code> 就是根据参数构建 <code class="highlighter-rouge">api.Event</code> 对象，自动填充时间戳和 namespace：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">recorder</span><span class="x"> </span><span class="o">*</span><span class="n">recorderImpl</span><span class="p">)</span><span class="x"> </span><span class="n">makeEvent</span><span class="p">(</span><span class="n">ref</span><span class="x"> </span><span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">ObjectReference</span><span class="p">,</span><span class="x"> </span><span class="n">eventtype</span><span class="p">,</span><span class="x"> </span><span class="n">reason</span><span class="p">,</span><span class="x"> </span><span class="n">message</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x"> </span><span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">Event</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">t</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">unversioned</span><span class="o">.</span><span class="n">Time</span><span class="p">{</span><span class="n">Time</span><span class="o">:</span><span class="x"> </span><span class="n">recorder</span><span class="o">.</span><span class="n">clock</span><span class="o">.</span><span class="n">Now</span><span class="p">()}</span><span class="x">
	</span><span class="n">namespace</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">ref</span><span class="o">.</span><span class="n">Namespace</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">namespace</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="s">""</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">namespace</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">api</span><span class="o">.</span><span class="n">NamespaceDefault</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="k">return</span><span class="x"> </span><span class="o">&amp;</span><span class="n">api</span><span class="o">.</span><span class="n">Event</span><span class="p">{</span><span class="x">
		</span><span class="n">ObjectMeta</span><span class="o">:</span><span class="x"> </span><span class="n">api</span><span class="o">.</span><span class="n">ObjectMeta</span><span class="p">{</span><span class="x">
			</span><span class="n">Name</span><span class="o">:</span><span class="x">      </span><span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%v.%x"</span><span class="p">,</span><span class="x"> </span><span class="n">ref</span><span class="o">.</span><span class="n">Name</span><span class="p">,</span><span class="x"> </span><span class="n">t</span><span class="o">.</span><span class="n">UnixNano</span><span class="p">()),</span><span class="x">
			</span><span class="n">Namespace</span><span class="o">:</span><span class="x"> </span><span class="n">namespace</span><span class="p">,</span><span class="x">
		</span><span class="p">},</span><span class="x">
		</span><span class="n">InvolvedObject</span><span class="o">:</span><span class="x"> </span><span class="o">*</span><span class="n">ref</span><span class="p">,</span><span class="x">
		</span><span class="n">Reason</span><span class="o">:</span><span class="x">         </span><span class="n">reason</span><span class="p">,</span><span class="x">
		</span><span class="n">Message</span><span class="o">:</span><span class="x">        </span><span class="n">message</span><span class="p">,</span><span class="x">
		</span><span class="n">FirstTimestamp</span><span class="o">:</span><span class="x"> </span><span class="n">t</span><span class="p">,</span><span class="x">
		</span><span class="n">LastTimestamp</span><span class="o">:</span><span class="x">  </span><span class="n">t</span><span class="p">,</span><span class="x">
		</span><span class="n">Count</span><span class="o">:</span><span class="x">          </span><span class="m">1</span><span class="p">,</span><span class="x">
		</span><span class="n">Type</span><span class="o">:</span><span class="x">           </span><span class="n">eventtype</span><span class="p">,</span><span class="x">
	</span><span class="p">}</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre></div></div>

<p><strong>注意 Event 事件的名字的构成</strong>，它有两部分：事件关联对象的名字和当前的时间，中间用点隔开。</p>

<p><code class="highlighter-rouge">api.Event</code> 这个结构体定义在 <code class="highlighter-rouge">pkg/api/types.go</code>：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span><span class="x"> </span><span class="n">Event</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">unversioned</span><span class="o">.</span><span class="n">TypeMeta</span><span class="x"> </span><span class="s">`json:",inline"`</span><span class="x">
	</span><span class="n">ObjectMeta</span><span class="x"> </span><span class="s">`json:"metadata,omitempty"`</span><span class="x">

	</span><span class="n">InvolvedObject</span><span class="x"> </span><span class="n">ObjectReference</span><span class="x"> </span><span class="s">`json:"involvedObject,omitempty"`</span><span class="x">

	</span><span class="n">Reason</span><span class="x"> </span><span class="kt">string</span><span class="x"> </span><span class="s">`json:"reason,omitempty"`</span><span class="x">
	</span><span class="n">Message</span><span class="x"> </span><span class="kt">string</span><span class="x"> </span><span class="s">`json:"message,omitempty"`</span><span class="x">
	</span><span class="n">Source</span><span class="x"> </span><span class="n">EventSource</span><span class="x"> </span><span class="s">`json:"source,omitempty"`</span><span class="x">
	</span><span class="n">Type</span><span class="x"> </span><span class="kt">string</span><span class="x"> </span><span class="s">`json:"type,omitempty"`</span><span class="x">

	</span><span class="n">FirstTimestamp</span><span class="x"> </span><span class="n">unversioned</span><span class="o">.</span><span class="n">Time</span><span class="x"> </span><span class="s">`json:"firstTimestamp,omitempty"`</span><span class="x">
	</span><span class="n">LastTimestamp</span><span class="x"> </span><span class="n">unversioned</span><span class="o">.</span><span class="n">Time</span><span class="x"> </span><span class="s">`json:"lastTimestamp,omitempty"`</span><span class="x">
	</span><span class="n">Count</span><span class="x"> </span><span class="kt">int32</span><span class="x"> </span><span class="s">`json:"count,omitempty"`</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre></div></div>

<p>除了所有的 kubernetes 资源都有的 <code class="highlighter-rouge">unversioned.TypeMeta</code>（资源的类型和版本，对应了 yaml 文件的 <code class="highlighter-rouge">Kind</code> 和 <code class="highlighter-rouge">apiVersion</code> 字段） 和 <code class="highlighter-rouge">ObjectMera</code> 字段（资源的元数据，比如 name、nemspace、labels、uuid、创建时间等）之外，还有和事件本身息息相关的字段，比如事件消息、来源、类型，以及数量（kubernetes 会把多个相同的事件汇聚到一起）和第一个事件的发生的时间等。</p>

<p>中间有个 <code class="highlighter-rouge">InvolvedObject</code> 字段，它其实指向了和事件关联的对象，如果是启动容器的事件，这个对象就是 Pod。</p>

<p>至此，我们就疏通了事件是怎么创建出来的。下面看看事件是怎么发出去的，发送是通过 <code class="highlighter-rouge">recorder.Action()</code> 实现的。找到对应的代码部分，竟然简单得只有一句话，把对象封装一下，发送到 <code class="highlighter-rouge">m.incoming</code> 管道。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Action distributes the given event among all watchers.</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">m</span><span class="x"> </span><span class="o">*</span><span class="n">Broadcaster</span><span class="p">)</span><span class="x"> </span><span class="n">Action</span><span class="p">(</span><span class="n">action</span><span class="x"> </span><span class="n">EventType</span><span class="p">,</span><span class="x"> </span><span class="n">obj</span><span class="x"> </span><span class="n">runtime</span><span class="o">.</span><span class="n">Object</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">m</span><span class="o">.</span><span class="n">incoming</span><span class="x"> </span><span class="o">&lt;-</span><span class="x"> </span><span class="n">Event</span><span class="p">{</span><span class="n">action</span><span class="p">,</span><span class="x"> </span><span class="n">obj</span><span class="p">}</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">Broadcaster</code> 是 <code class="highlighter-rouge">Recoder</code> 内部的对象，调用 <code class="highlighter-rouge">NewRecoder</code> 的时候 <code class="highlighter-rouge">EventBroadcaster</code> 传给它的。接下来，我们要分析 <code class="highlighter-rouge">EventBroadcaster</code> 的实现。</p>

<h3 id="eventbroadcaster-实现事件的分发">EventBroadcaster 实现事件的分发</h3>

<p><code class="highlighter-rouge">EventBroadcaster</code> 也在 <code class="highlighter-rouge">pkg/event/record/event.go</code> 文件中：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type eventBroadcasterImpl struct {
	*watch.Broadcaster
	sleepDuration time.Duration
}

func NewBroadcaster() EventBroadcaster {
	return &amp;eventBroadcasterImpl{watch.NewBroadcaster(maxQueuedEvents, watch.DropIfChannelFull), defaultSleepDuration}
}
</code></pre></div></div>

<p>它的核心组件是 <code class="highlighter-rouge">watch.Broadcaster</code>，<code class="highlighter-rouge">Broadcaster</code> 就是广播的意思，主要功能就是把发给它的消息，广播给所有的监听者（watcher）。它的实现代码在 <code class="highlighter-rouge">pkg/watch/mux.go</code>，我们不再深入剖析，不过这部分代码如何使用 golang channel 是值得所有读者学习的。</p>

<p>简单来说，<code class="highlighter-rouge">watch.Broadcaster</code> 是一个分发器，内部保存了一个消息队列，可以通过 <code class="highlighter-rouge">Watch</code> 创建监听它内部的 worker。当有消息发送到队列中，<code class="highlighter-rouge">watch.Broadcaster</code> 后台运行的 goroutine 会接收消息并发送给所有的 watcher。而每个 <code class="highlighter-rouge">watcher</code> 都有一个接收消息的 channel，用户可以通过它的 <code class="highlighter-rouge">ResultChan()</code> 获取这个 channel 从中读取数据进行处理。</p>

<p>前面说过 <code class="highlighter-rouge">StartLogging</code> 和 <code class="highlighter-rouge">StartRecordingToSink</code> 都是启动一个事件处理的函数，我们就以后者为例，看看事件的处理过程：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">eventBroadcaster</span><span class="x"> </span><span class="o">*</span><span class="n">eventBroadcasterImpl</span><span class="p">)</span><span class="x"> </span><span class="n">StartRecordingToSink</span><span class="p">(</span><span class="n">sink</span><span class="x"> </span><span class="n">EventSink</span><span class="p">)</span><span class="x"> </span><span class="n">watch</span><span class="o">.</span><span class="n">Interface</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">randGen</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">rand</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">rand</span><span class="o">.</span><span class="n">NewSource</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">UnixNano</span><span class="p">()))</span><span class="x">
	</span><span class="n">eventCorrelator</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">NewEventCorrelator</span><span class="p">(</span><span class="n">clock</span><span class="o">.</span><span class="n">RealClock</span><span class="p">{})</span><span class="x">
	</span><span class="k">return</span><span class="x"> </span><span class="n">eventBroadcaster</span><span class="o">.</span><span class="n">StartEventWatcher</span><span class="p">(</span><span class="x">
		</span><span class="k">func</span><span class="p">(</span><span class="n">event</span><span class="x"> </span><span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">Event</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">recordToSink</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span><span class="x"> </span><span class="n">event</span><span class="p">,</span><span class="x"> </span><span class="n">eventCorrelator</span><span class="p">,</span><span class="x"> </span><span class="n">randGen</span><span class="p">,</span><span class="x"> </span><span class="n">eventBroadcaster</span><span class="o">.</span><span class="n">sleepDuration</span><span class="p">)</span><span class="x">
		</span><span class="p">})</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">StartRecordingToSink</code> 就是对 <code class="highlighter-rouge">StartEventWatcher</code> 的封装，将处理函数设置为 <code class="highlighter-rouge">recordToSink</code>。我们先看看 <code class="highlighter-rouge">StartEventWatcher</code> 的代码：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func (eventBroadcaster *eventBroadcasterImpl) StartEventWatcher(eventHandler func(*api.Event)) watch.Interface {
	watcher := eventBroadcaster.Watch()
	go func() {
		defer utilruntime.HandleCrash()
		for {
			watchEvent, open := &lt;-watcher.ResultChan()
			if !open {
				return
			}
			event, ok := watchEvent.Object.(*api.Event)
			if !ok {
				continue
			}
			eventHandler(event)
		}
	}()
	return watcher
}
</code></pre></div></div>

<p>它启动一个 goroutine，不断从 <code class="highlighter-rouge">watcher.ResultChan()</code> 中读取消息，然后调用 <code class="highlighter-rouge">eventHandler(event)</code> 对事件进行处理。</p>

<p>而我们的处理函数就是 <code class="highlighter-rouge">recordToSink</code>，它的代码是下一节的重点。</p>

<h3 id="事件的处理过程">事件的处理过程</h3>

<p><code class="highlighter-rouge">recordToSink</code> 负责把事件发送到 apiserver，这里的 sink 其实就是和 apiserver 交互的 restclient， event 是要发送的事件，eventCorrelator 在发送事件之前先对事件进行预处理。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span><span class="x"> </span><span class="n">recordToSink</span><span class="p">(</span><span class="n">sink</span><span class="x"> </span><span class="n">EventSink</span><span class="p">,</span><span class="x"> </span><span class="n">event</span><span class="x"> </span><span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">Event</span><span class="p">,</span><span class="x"> </span><span class="n">eventCorrelator</span><span class="x"> </span><span class="o">*</span><span class="n">EventCorrelator</span><span class="p">,</span><span class="x"> </span><span class="n">randGen</span><span class="x"> </span><span class="o">*</span><span class="n">rand</span><span class="o">.</span><span class="n">Rand</span><span class="p">,</span><span class="x"> </span><span class="n">sleepDuration</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">eventCopy</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="o">*</span><span class="n">event</span><span class="x">
	</span><span class="n">event</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="o">&amp;</span><span class="n">eventCopy</span><span class="x">
	</span><span class="n">result</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">eventCorrelator</span><span class="o">.</span><span class="n">EventCorrelate</span><span class="p">(</span><span class="n">event</span><span class="p">)</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">result</span><span class="o">.</span><span class="n">Skip</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">return</span><span class="x">
	</span><span class="p">}</span><span class="x">
	
	</span><span class="n">tries</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="x">
	</span><span class="k">for</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">if</span><span class="x"> </span><span class="n">recordEvent</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span><span class="x"> </span><span class="n">result</span><span class="o">.</span><span class="n">Event</span><span class="p">,</span><span class="x"> </span><span class="n">result</span><span class="o">.</span><span class="n">Patch</span><span class="p">,</span><span class="x"> </span><span class="n">result</span><span class="o">.</span><span class="n">Event</span><span class="o">.</span><span class="n">Count</span><span class="x"> </span><span class="o">&gt;</span><span class="x"> </span><span class="m">1</span><span class="p">,</span><span class="x"> </span><span class="n">eventCorrelator</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="k">break</span><span class="x">
		</span><span class="p">}</span><span class="x">
		</span><span class="n">tries</span><span class="o">++</span><span class="x">
		</span><span class="k">if</span><span class="x"> </span><span class="n">tries</span><span class="x"> </span><span class="o">&gt;=</span><span class="x"> </span><span class="n">maxTriesPerEvent</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">glog</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Unable to write event '%#v' (retry limit exceeded!)"</span><span class="p">,</span><span class="x"> </span><span class="n">event</span><span class="p">)</span><span class="x">
			</span><span class="k">break</span><span class="x">
		</span><span class="p">}</span><span class="x">
		</span><span class="c">// 第一次重试增加随机性，防止 apiserver 重启的时候所有的事件都在同一时间发送事件</span><span class="x">
		</span><span class="k">if</span><span class="x"> </span><span class="n">tries</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="m">1</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">(</span><span class="kt">float64</span><span class="p">(</span><span class="n">sleepDuration</span><span class="p">)</span><span class="x"> </span><span class="o">*</span><span class="x"> </span><span class="n">randGen</span><span class="o">.</span><span class="n">Float64</span><span class="p">()))</span><span class="x">
		</span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">sleepDuration</span><span class="p">)</span><span class="x">
		</span><span class="p">}</span><span class="x">
	</span><span class="p">}</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">recordToSink</code> 对事件的处理分为两个步骤：<code class="highlighter-rouge">eventCorrelator.EventCorrelate</code> 会对事件做预处理，主要是聚合相同的事件（避免产生的事件过多，增加 etcd 和 apiserver 的压力，也会导致查看 pod 事件很不清晰）；<code class="highlighter-rouge">recordEvent</code> 负责最终把事件发送到 apiserver，它会重试很多次（默认是 12 次），并且每次重试都有一定时间间隔（默认是 10 秒钟）。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span><span class="x"> </span><span class="n">recordEvent</span><span class="p">(</span><span class="n">sink</span><span class="x"> </span><span class="n">EventSink</span><span class="p">,</span><span class="x"> </span><span class="n">event</span><span class="x"> </span><span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">Event</span><span class="p">,</span><span class="x"> </span><span class="n">patch</span><span class="x"> </span><span class="p">[]</span><span class="kt">byte</span><span class="p">,</span><span class="x"> </span><span class="n">updateExistingEvent</span><span class="x"> </span><span class="kt">bool</span><span class="p">,</span><span class="x"> </span><span class="n">eventCorrelator</span><span class="x"> </span><span class="o">*</span><span class="n">EventCorrelator</span><span class="p">)</span><span class="x"> </span><span class="kt">bool</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="k">var</span><span class="x"> </span><span class="n">newEvent</span><span class="x"> </span><span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">Event</span><span class="x">
	</span><span class="k">var</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="kt">error</span><span class="x">
	
	</span><span class="c">// 更新已经存在的事件</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">updateExistingEvent</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">newEvent</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">sink</span><span class="o">.</span><span class="n">Patch</span><span class="p">(</span><span class="n">event</span><span class="p">,</span><span class="x"> </span><span class="n">patch</span><span class="p">)</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="c">// 创建一个新的事件</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="o">!</span><span class="n">updateExistingEvent</span><span class="x"> </span><span class="o">||</span><span class="x"> </span><span class="p">(</span><span class="n">updateExistingEvent</span><span class="x"> </span><span class="o">&amp;&amp;</span><span class="x"> </span><span class="n">isKeyNotFoundError</span><span class="p">(</span><span class="n">err</span><span class="p">))</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">event</span><span class="o">.</span><span class="n">ResourceVersion</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="s">""</span><span class="x">
		</span><span class="n">newEvent</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">sink</span><span class="o">.</span><span class="n">Create</span><span class="p">(</span><span class="n">event</span><span class="p">)</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="c">// we need to update our event correlator with the server returned state to handle name/resourceversion</span><span class="x">
		</span><span class="n">eventCorrelator</span><span class="o">.</span><span class="n">UpdateState</span><span class="p">(</span><span class="n">newEvent</span><span class="p">)</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="no">true</span><span class="x">
	</span><span class="p">}</span><span class="x">

    </span><span class="c">// 如果是已知错误，就不要再重试了；否则，返回 false，让上层进行重试</span><span class="x">
	</span><span class="k">switch</span><span class="x"> </span><span class="n">err</span><span class="o">.</span><span class="p">(</span><span class="k">type</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="k">case</span><span class="x"> </span><span class="o">*</span><span class="n">restclient</span><span class="o">.</span><span class="n">RequestConstructionError</span><span class="o">:</span><span class="x">
		</span><span class="n">glog</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Unable to construct event '%#v': '%v' (will not retry!)"</span><span class="p">,</span><span class="x"> </span><span class="n">event</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">)</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="no">true</span><span class="x">
	</span><span class="k">case</span><span class="x"> </span><span class="o">*</span><span class="n">errors</span><span class="o">.</span><span class="n">StatusError</span><span class="o">:</span><span class="x">
		</span><span class="k">if</span><span class="x"> </span><span class="n">errors</span><span class="o">.</span><span class="n">IsAlreadyExists</span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">glog</span><span class="o">.</span><span class="n">V</span><span class="p">(</span><span class="m">5</span><span class="p">)</span><span class="o">.</span><span class="n">Infof</span><span class="p">(</span><span class="s">"Server rejected event '%#v': '%v' (will not retry!)"</span><span class="p">,</span><span class="x"> </span><span class="n">event</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">)</span><span class="x">
		</span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">glog</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Server rejected event '%#v': '%v' (will not retry!)"</span><span class="p">,</span><span class="x"> </span><span class="n">event</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">)</span><span class="x">
		</span><span class="p">}</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="no">true</span><span class="x">
	</span><span class="k">case</span><span class="x"> </span><span class="o">*</span><span class="n">errors</span><span class="o">.</span><span class="n">UnexpectedObjectError</span><span class="o">:</span><span class="x">
	</span><span class="k">default</span><span class="o">:</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="n">glog</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Unable to write event: '%v' (may retry after sleeping)"</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">)</span><span class="x">
	</span><span class="k">return</span><span class="x"> </span><span class="no">false</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre></div></div>
<p>它根据 <code class="highlighter-rouge">eventCorrelator</code> 的结果来决定是新建一个事件还是更新已经存在的事件，并根据请求的结果决定是否需要重试（返回值为 false 说明需要重试，返回值为 true 表明已经操作成功或者忽略请求错误）。<code class="highlighter-rouge">sink.Create</code> 和 <code class="highlighter-rouge">sink.Patch</code> 是自动生成的 apiserver 的 client，对应的代码在： <code class="highlighter-rouge">pkg/client/clientset_generated/internalclientset/typed/core/internalversion/event_expansion.go</code> 。</p>

<p>到这里，事件总算完成了它的使命，到了目的地。但是我们略过了 <code class="highlighter-rouge">EventCorrelator</code> 的部分，它在发送之前对事件做过滤和聚合处理，以免产生大量的事件给 apiserver 和 etcd 带来太大的压力。</p>

<h3 id="eventcorrelator事件的预处理">EventCorrelator：事件的预处理</h3>

<p><code class="highlighter-rouge">EventCorrelator</code> 的代码在 <code class="highlighter-rouge">pkg/client/record/event_cache.go</code> 文件中，从文件名可以猜测出它对事件做了缓存。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span><span class="x"> </span><span class="n">NewEventCorrelator</span><span class="p">(</span><span class="n">clock</span><span class="x"> </span><span class="n">clock</span><span class="o">.</span><span class="n">Clock</span><span class="p">)</span><span class="x"> </span><span class="o">*</span><span class="n">EventCorrelator</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">cacheSize</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">maxLruCacheEntries</span><span class="x">
	</span><span class="k">return</span><span class="x"> </span><span class="o">&amp;</span><span class="n">EventCorrelator</span><span class="p">{</span><span class="x">
		</span><span class="n">filterFunc</span><span class="o">:</span><span class="x"> </span><span class="n">DefaultEventFilterFunc</span><span class="p">,</span><span class="x">
		</span><span class="n">aggregator</span><span class="o">:</span><span class="x"> </span><span class="n">NewEventAggregator</span><span class="p">(</span><span class="x">
			</span><span class="n">cacheSize</span><span class="p">,</span><span class="x">
			</span><span class="n">EventAggregatorByReasonFunc</span><span class="p">,</span><span class="x">
			</span><span class="n">EventAggregatorByReasonMessageFunc</span><span class="p">,</span><span class="x">
			</span><span class="n">defaultAggregateMaxEvents</span><span class="p">,</span><span class="x">
			</span><span class="n">defaultAggregateIntervalInSeconds</span><span class="p">,</span><span class="x">
			</span><span class="n">clock</span><span class="p">),</span><span class="x">
		</span><span class="n">logger</span><span class="o">:</span><span class="x"> </span><span class="n">newEventLogger</span><span class="p">(</span><span class="n">cacheSize</span><span class="p">,</span><span class="x"> </span><span class="n">clock</span><span class="p">),</span><span class="x">
	</span><span class="p">}</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// EventCorrelate filters, aggregates, counts, and de-duplicates all incoming events</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">c</span><span class="x"> </span><span class="o">*</span><span class="n">EventCorrelator</span><span class="p">)</span><span class="x"> </span><span class="n">EventCorrelate</span><span class="p">(</span><span class="n">newEvent</span><span class="x"> </span><span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">Event</span><span class="p">)</span><span class="x"> </span><span class="p">(</span><span class="o">*</span><span class="n">EventCorrelateResult</span><span class="p">,</span><span class="x"> </span><span class="kt">error</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">c</span><span class="o">.</span><span class="n">filterFunc</span><span class="p">(</span><span class="n">newEvent</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="o">&amp;</span><span class="n">EventCorrelateResult</span><span class="p">{</span><span class="n">Skip</span><span class="o">:</span><span class="x"> </span><span class="no">true</span><span class="p">},</span><span class="x"> </span><span class="no">nil</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="n">aggregateEvent</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">c</span><span class="o">.</span><span class="n">aggregator</span><span class="o">.</span><span class="n">EventAggregate</span><span class="p">(</span><span class="n">newEvent</span><span class="p">)</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="o">&amp;</span><span class="n">EventCorrelateResult</span><span class="p">{},</span><span class="x"> </span><span class="n">err</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="n">observedEvent</span><span class="p">,</span><span class="x"> </span><span class="n">patch</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">c</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">eventObserve</span><span class="p">(</span><span class="n">aggregateEvent</span><span class="p">)</span><span class="x">
	</span><span class="k">return</span><span class="x"> </span><span class="o">&amp;</span><span class="n">EventCorrelateResult</span><span class="p">{</span><span class="n">Event</span><span class="o">:</span><span class="x"> </span><span class="n">observedEvent</span><span class="p">,</span><span class="x"> </span><span class="n">Patch</span><span class="o">:</span><span class="x"> </span><span class="n">patch</span><span class="p">},</span><span class="x"> </span><span class="n">err</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">EventCorrelator</code> 内部有三个对象：<code class="highlighter-rouge">filterFunc</code>、<code class="highlighter-rouge">aggregator</code> 和 <code class="highlighter-rouge">logger</code>，它们分别对事件进行过滤、把相似的事件汇聚在一起、把相同的事件记录到一起。使用 <code class="highlighter-rouge">NewEventCorrelator</code> 初始化的时候内部会自动创建各个对象的默认值，<code class="highlighter-rouge">EventCorrelate</code> 会以此调用三个对象的方法，并返回最终的结果。现在它们的逻辑是这样的：</p>

<ul>
  <li><code class="highlighter-rouge">filterFunc</code>：目前不做过滤，也就是说所有的事件都要经过后续处理，后面可能会做扩展</li>
  <li><code class="highlighter-rouge">aggregator</code>：如果在最近 10 分钟出现过 10 个相似的事件（除了 message 和时间戳之外其他关键字段都相同的事件），aggregator 会把它们的 message 设置为 <code class="highlighter-rouge">events with common reason combined</code>，这样它们就完全一样了</li>
  <li><code class="highlighter-rouge">logger</code>：这个变量的名字有点奇怪，其实它会把相同的事件（除了时间戳之外其他字段都相同）变成同一个事件，通过增加事件的 <code class="highlighter-rouge">Count</code> 字段来记录该事件发生了多少次。经过 <code class="highlighter-rouge">aggregator</code> 的事件会在这里变成同一个事件</li>
</ul>

<p><code class="highlighter-rouge">aggregator</code> 和 <code class="highlighter-rouge">logger</code> 都会在内部维护一个缓存（默认长度是 4096），事件的相似性和相同性比较是和缓存中的事件进行的，也就是说它并在乎 kubelet 启动之前的事件，而且如果事件超过 4096 的长度，最近没有被访问的事件也会被从缓存中移除。这也是这个文件中带有 <code class="highlighter-rouge">cache</code> 的原因。它们的内部实现并不复杂，有兴趣的读者请自行阅读相关源码。</p>

<h2 id="event-总结">Event 总结</h2>

<p>通过这篇文章，我们了解到了整个事件机制的来龙去脉。最后，我们再做一个总结，看看事件流动的整个过程：</p>

<ol>
  <li>kubelet 通过 <code class="highlighter-rouge">recorder</code> 对象提供的 <code class="highlighter-rouge">Event</code>、<code class="highlighter-rouge">Eventf</code> 和 <code class="highlighter-rouge">PastEventf</code> 方法产生特性的事件</li>
  <li><code class="highlighter-rouge">recorder</code> 根据传递过来的参数新建一个 <code class="highlighter-rouge">Event</code> 对象，并把它发送给 <code class="highlighter-rouge">EventBroadcaster</code> 的管道</li>
  <li><code class="highlighter-rouge">EventBroadcaster</code> 后台运行的 goroutine 从管道中读取事件消息，把它广播给之前注册的 handler 进行处理</li>
  <li>kubelet 有两个 handler，它们分别把事件记录到日志和发送给 apiserver。记录到日志很简单，直接打印就行</li>
  <li>发送给 apiserver 的 handler 叫做 <code class="highlighter-rouge">EventSink</code>，它在发送事件给 apiserver 之前会先做预处理</li>
  <li>预处理操作是 <code class="highlighter-rouge">EventCorrelator</code> 完成的，它会对事件做过滤、汇聚和去重操作，返回处理后的事件（可能是原来的事件，也可能是新创建的事件）</li>
  <li>最后通过 restclient （eventClient） 调用对应的方法，给 apiserver 发送请求，这个过程如果出错会进行重试</li>
  <li>apiserver 接收到事件的请求把数据更新到 etcd</li>
</ol>

<p>事件的产生过程是这样的，那么这些事件都有什么用呢？它一般用于调试，用户可以通过 <code class="highlighter-rouge">kubectl</code> 命令获取整个集群或者某个 pod 的事件信息。<code class="highlighter-rouge">kubectl get events</code> 可以看到所有的事件，<code class="highlighter-rouge">kubectl describe pod PODNAME</code> 能看到关于某个 pod 的事件。对于前者很好理解，kubectl 会直接访问 apiserver 的 event 资源，而对于后者 kubectl 还根据 pod 的名字进行搜索，匹配 InvolvedObject 名称和 pod 名称匹配的事件。</p>

<p>我们来思考一下事件机制的框架，有哪些我们可以借鉴的设计思想呢？我想最重要的一点是：<strong>需求决定实现</strong>。</p>

<p>Event 和 kubernetes 中其他的资源不同，它有一个很重要的特性就是它可以丢失。如果某个事件丢了，并不会影响集群的正常工作。事件的重要性远低于集群的稳定性，所以我们看到事件整个流程中如果有错误，会直接忽略这个事件。</p>

<p>事件的另外一个特性是它的数量很多，相比于 pod 或者 deployment 等资源，事件要比它们多很多，而且每次有事件都要对 etcd 进行写操作。整个集群如果不加管理地往 etcd 中写事件，会对 etcd 造成很大的压力，而 etcd 的可用性是整个集群的基础，所以每个组件在写事件之前，会对事件进行汇聚和去重工作，减少最终的写操作。</p>

<h2 id="参考资料">参考资料</h2>

<ul>
  <li><a href="https://www.kubernetes.org.cn/1195.html">Kubernetes Events介绍（下）</a></li>
  <li><a href="https://kubernetes.io/docs/tasks/debug-application-cluster/debug-application-introspection/">Application Introspection and Debugging</a></li>
</ul>

    <p><a href="http://cizixs.com/2017/06/22/kubelet-source-code-analysis-part4-event">kubelet 源码分析： 事件处理</a> was originally published by cizixs at <a href="http://cizixs.com">Cizixs Writes Here</a> on June 22, 2017.</p>
  