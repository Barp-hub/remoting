<h1>一、HP-UX的文件系统：</h1>
<p>HP-UX主要使用HFS和VXFS两种文件系统，而这两种文件系统的主要特性和区别如下：</p>
<h2>1.1 HFS</h2>
<p>HFS是一种分层文件系统，早期由苹果开发，用于mac系统（mac基于unix），后来引入到其他unix系统。主要特性如下：</p>
<p>分层文件系统把一个卷分为许多512字节的“逻辑块”。这些逻辑块被编组为“分配块”，这些分配块可以根据卷的尺寸包含一个或多个逻辑块。HFS对地址分配块使用16位数值，分配块的最高限制数量是65536。</p>
<p><strong>组成一个HFS卷需要下面的五个结构：</strong></p>
<ul>
<li>卷的逻辑块0和1是<b>启动块</b>，它包含了系统启动信息。例如，启动时载入的系统名称和壳（通常是Finder）文件。</li>
<li>逻辑块2包含<b>主目录块</b>（<b>Master Directory Block</b>，简称<b>MDB</b>）。</li>
<li>逻辑块3是<b>卷位图</b>（<b>Volume Bitmap</b>）的启动块，它追踪分配块使用状态。</li>
<li><b>总目录文件</b>（<b>Catalog File</b>）是一个包含所有文件的记录和储存在卷中目录的B*-tree。</li>
<li><b>扩展溢出文件</b>（<b>Extent Overflow File</b>）是当最初总目录文件中三个扩展占用后，另外一个包含额外扩展记录的分配块对应信息的B*-tree。</li>
</ul>
<h2>1.2 VXFS</h2>
<p>VeritasFileSystem(VxFS）是首个商业日志记录文件系统。通过日志记录功能，元数据更改首先写入到日志，然后再写入到磁盘。由于无需在多处写入更改，且元数据是异步写入的，因此吞吐量的速度较快。VxFS也是基于扩展区的意向日志记录文件系统。VxFS设计用于要求高性能和高可用性，并且可以处理大量数据的操作环境。</p>
<h2>1.3 HP-UX默认文件系统：</h2>
<p>配置文件 /etc/default/fs定义了hp-ux的默认文件系统：</p>
<blockquote><p># cat /etc/default/fs<br />
LOCAL=vxfs</p></blockquote>
<p><span id="more-857"></span></p>
<h1>二、发现新磁盘：</h1>
<h3>查看添加磁盘前磁盘的情况：</h3>
<blockquote><p># ioscan -fNnkC disk</p>
<p># ioscan -m lun</p></blockquote>
<h3>添加新磁盘后，需使用如下命令扫描io设备变化情况：</h3>
<blockquote><p># ioscan</p></blockquote>
<h3>查看扫描到的新磁盘：</h3>
<blockquote><p># ioscan -fNnkC disk</p>
<p># ioscan -m lun</p></blockquote>
<p>看到的磁盘如果如下，恭喜你，可以进入lvm的创建环节。</p>
<blockquote><p>disk     41  64000/0xfa00/0x13   esdisk  CLAIMED     DEVICE       online  3PARdataVV</p>
<p>0/0/0/5/0/0/0.0x23110002ac000e5a.0x4003000000000000<br />
<strong>/dev/disk/disk41  /dev/rdisk/disk41</strong></p></blockquote>
<p>如果新磁盘有上述红色的部分，表示磁盘已经可以正常使用。如果没有，而是如下这样：</p>
<blockquote><p>disk     41  64000/0xfa00/0x13   esdisk  CLAIMED     DEVICE       online  3PARdataVV<br />
0/0/0/5/0/0/0.0x23110002ac000e5a.0x4003000000000000</p></blockquote>
<h3>则需使用insf命令进行安装磁盘：</h3>
<blockquote><p># insf –e</p></blockquote>
<h3>查看新磁盘详细信息：</h3>
<blockquote><p># diskinfo /dev/rdisk/disk41<br />
SCSI describe of /dev/rdisk/disk41:<br />
vendor: 3PARdata<br />
product id: VV<br />
type: direct access<br />
size: 104857600 Kbytes<br />
bytes per sector: 512</p></blockquote>
<h1>三、LVM的创建：</h1>
<h2>3.1 创建PV（物理卷）和LVM的基本概念：</h2>
<p>要使用 LVM，磁盘必须首先初始化为物理卷 （也称为 LVM 磁盘）。初始化一个或多个物理卷之后，将它们分为一个或多个卷组。如果将所有物理卷视为一个存储池，那么，该存储池的一部分磁盘可以组织成一个卷组。一个特定磁盘只能属于一个卷组。</p>
<h3>LVM的基本结构如下：</h3>
<p><a class="cboxElement" href="http://www.toxingwang.com/wp-content/uploads/2013/09/lvm.jpg" rel="example4"><img title="lvm结构" src="http://www.toxingwang.com/wp-content/uploads/2013/09/lvm_thumb.jpg" alt="lvm结构" width="550" height="508" border="0" /></a></p>
<h3>物理盘区（PE）和逻辑盘区（LE）：</h3>
<p>LVM 将每个物理磁盘分为叫做物理盘区的可寻址单元。盘区从地址为零的磁盘头开始、每个单元的地址依次递增一，按顺序分配给磁盘。在形成卷组时，物理盘区大小是可配置的，并且这个大小应用于卷组中的所有磁盘。HP-UX默认情况下，每个盘区的大小为 4 MB。在创建卷组时，此值可以更改为 1 MB 到 256 MB 之间的值。</p>
<p>逻辑卷的基本分配单元称为<strong>逻辑盘区</strong>。逻辑盘区映射到物理盘区，因此如果物理盘区大小为 4 MB，那么逻辑盘区将具有同样的大小。逻辑卷的大小取决于所配置的逻辑盘区数。</p>
<p>物理盘区和逻辑盘区关系如下：</p>
<p><a class="cboxElement" href="http://www.toxingwang.com/wp-content/uploads/2013/09/lvmPE_LE.jpg" rel="example4"><img title="lvm之PE_LE" src="http://www.toxingwang.com/wp-content/uploads/2013/09/lvmPE_LE_thumb.jpg" alt="lvm之PE_LE" width="669" height="676" border="0" /></a></p>
<h3>创建PV：</h3>
<blockquote><p>pvcreate /dev/<strong>r</strong>disk/disk41</p></blockquote>
<h2>3.2 创建VG（卷组）</h2>
<h3>不同版本的VG创建方式不太一样，我这里仅以2.2为例：</h3>
<h3>基本语法：</h3>
<blockquote><p>vgcreate -V 2.2 -s pe_size -S vg_size [-A autobackup]<br />
[-x extensibility] [-g pvg_name] [-U unshare_unit] vg_name<br />
pv_path &#8230;</p></blockquote>
<h3>示例：</h3>
<blockquote><p># vgcreate -V 2.2 -s 64 -S 100G vgbackup<strong> /dev/disk</strong>/disk41</p></blockquote>
<h3>3.3 创建LV（逻辑卷）</h3>
<h3>基本语法：</h3>
<blockquote><p>lvcreate [-A autobackup] [-c mirror_consistency]<br />
[-C contiguous] [-d schedule] [-D distributed]<br />
[-i stripes [-I stripe_size]] [-l le_number | -L lv_size]<br />
[-m mirror_copies] [-M mirror_write_cache] [-n lv_name]<br />
[-p permission] [-r relocate] [-s strict] vg_name</p></blockquote>
<p><strong>语法选项很多，这里一般只需关注几项即可：</strong></p>
<p>-L ：指定LV大小，默认以K为单位，可以指定以M或G为单位；如果不指定，LV将为空，可使用lvextend扩展。</p>
<p>-n ：指定LV名称，如果不指定，则自动生成；</p>
<p>vg_name ：指定VG名称，必须指定。</p>
<h3>示例：</h3>
<blockquote><p># lvcreate -L 100G -n lvbackup vgbackup</p></blockquote>
<h3>查看LV：</h3>
<blockquote><p># lvdisplay /dev/vgbackup/lvbackup<br />
&#8212; Logical volumes &#8212;<br />
LV Name                     /dev/vgbackup/lvbackup<br />
VG Name                     /dev/vgbackup<br />
LV Permission               read/write<br />
LV Status                   available/syncd<br />
Mirror copies               0<br />
Consistency Recovery        MWC<br />
Schedule                    parallel<br />
LV Size (Mbytes)            96000<br />
Current LE                  375<br />
Allocated PE                375<br />
Stripes                     0<br />
Stripe Size (Kbytes)        0<br />
Bad block                   NONE<br />
Allocation                  strict<br />
IO Timeout (Seconds)        default</p></blockquote>
<h2>3.4 创建文件系统：</h2>
<p>使用 newfs 命令创建一个文件系统。注意字符设备文件的使用。例如：</p>
<blockquote><p># newfs  -F  vxfs /dev/vgbackup/rlvbackup</p></blockquote>
<p>如果不使用 -F FStype 选项，默认情况下，newfs 将创建基于 /etc/fstab文件内容的文件系统。如果 /etc/fstab 中没有文件系统的条目，那么文件系统类型由文件 /etc/default/fs 来决定。</p>
<h2>3.5 实现开机自动挂载文件系统：</h2>
<blockquote><p># echo “/dev/vgbackup/lvbackup /dp_backup vxfs delaylog 0 2”&#62;&#62;/etc/fstab</p></blockquote>
<h3>挂载系统：</h3>
<blockquote><p># mount -a</p></blockquote>
<h1>四、LVM的扩展：</h1>
<p>LVM的扩展分两种情况，一种是VG还有剩余空间，另外一种是VG已经没有剩余空间，我们分别来说。</p>
<h3>查看VG使用情况：</h3>
<blockquote><p># vgdisplay /dev/vgbackup<br />
&#8212; Volume groups &#8212;<br />
VG Name                     /dev/vgbackup<br />
VG Write Access             read/write<br />
VG Status                   available<br />
Max LV                      511<br />
Cur LV                      1<br />
Open LV                     1<br />
Max PV                      511<br />
Cur PV                      1<br />
Act PV                      1<br />
Max PE per PV               400<br />
VGDA                        2<br />
PE Size (Mbytes)            256<br />
Total PE                    399<br />
Alloc PE                    375<br />
<strong>Free PE                     24</strong><br />
Total PVG                   0<br />
Total Spare PVs             0<br />
Total Spare PVs in use      0<br />
VG Version                  2.0<br />
VG Max Size                 100g<br />
VG Max Extents              400</p></blockquote>
<p>如果Free PE不为0，则表示vg还有剩余空间，剩余空间的大小为：剩余数*创建VG时使用-s指定的PE大小，如我这里剩余24个PE，则剩余VG容量为：24*64=1536M</p>
<h2>4.1 扩展VG：</h2>
<h4>4.1.1 创建PV</h4>
<p>扩展VG只能添加新磁盘，然后将新磁盘创建为pv后进行扩展，创建命令为：</p>
<blockquote><p>pvcreate /dev/<strong>r</strong>disk/disk#</p></blockquote>
<p>注：上述#表示新磁盘的序号</p>
<h4>4.1.2 扩展VG：</h4>
<p><strong>基本语法：</strong></p>
<blockquote><p>vgextend [-f] [-A autobackup] [-g pvg_name]<br />
[-x extensibility] [-z sparepv] vg_name pv_path &#8230;</p></blockquote>
<p><strong>示例：</strong></p>
<blockquote><p># vgextend  /dev/vgbackup /dev/disk/disk46</p></blockquote>
<h2>4.2 扩展LV：</h2>
<p>扩展完VG后，就可以对LV进行扩展了。</p>
<h3>基本语法：</h3>
<blockquote><p>lvextend [-A autobackup]<br />
{-l le_number | -L lv_size | -m mirror_copies [-s]} lv_path<br />
[pv_path &#8230; | pvg_name &#8230;]</p></blockquote>
<p>需要注意的是，HP-UX扩展LV不向linux那样，可以<strong>-l +50G</strong>这样的方式指定增大多少空间，而是只能指定增大目标容量或者LE（逻辑单元）。</p>
<h3>示例：</h3>
<blockquote><p># lvextend -L 150000M /dev/vgbackup/lvbackup   ##增加容量到150G</p>
<p># lvextend –l    2400 /dev/vgbackup/lvbackup     ##增加le到2400个，每个大小64M，因此同样是150G</p></blockquote>
<h2>4.3 扩展文件系统：</h2>
<p>之有将扩展后的lv应用到文件系统，才能实际被文件系统使用，这就需要扩展文件系统。而扩展文件系统必须先卸载文件系统；卸载文件系统先要停止对文件系统的访问，然后使用umount卸载。</p>
<h3>卸载文件系统：</h3>
<blockquote><p># umount /dev/vgbackup/lvbackup</p></blockquote>
<h3>扩展文件系统：</h3>
<blockquote><p># extendfs /dev/vgbackup/lvbackup</p></blockquote>
<h3>重新挂载文件系统：</h3>
<blockquote><p># mount -a</p></blockquote>
